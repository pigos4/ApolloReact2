{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/danielpiga/Desktop/Apollo2 copy/ApolloReact/apolloclient/src/graphql/mutation/Signup.js\",\n    _s = $RefreshSig$();\n\nimport { React, useState } from \"react\";\nimport { gql, useMutation } from \"@apollo/client\";\nconst ADD_USER = gql`\n  mutation($name: String!, $username: String!, $password: String!) {\n    addUser(name: $name, username: $username, password: $password) {\n      response\n      \n    }\n  }\n`;\nexport default function Mut() {\n  _s();\n\n  const [addUser, {\n    data,\n    loading\n  }] = useMutation(ADD_USER);\n  const [user, setUser] = useState({\n    name: \"\",\n    username: \"\",\n    password: \"\"\n  });\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      onChange: e => setUser({\n        \"name\": e.target.value,\n        \"username\": user.username,\n        \"password\": user.password\n      }),\n      placeholder: \"nome\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      onChange: e => {\n        setUser({\n          \"name\": user.name,\n          \"username\": e.target.value,\n          \"password\": user.password\n        });\n      },\n      placeholder: \"username\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"password\",\n      onChange: e => {\n        setUser({\n          \"name\": user.name,\n          \"username\": user.username,\n          \"password\": e.target.value\n        });\n      },\n      placeholder: \"password\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"button\",\n      value: \"submit\",\n      onClick: () => {\n        addUser({\n          variables: user\n        });\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"button\",\n      onClick: () => console.log(data),\n      value: \"consolelog\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }, this), user.name, user.username, user.password, loading ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"loading\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 18\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"done\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 35\n    }, this), data ? `User registered successfully ${data.addUser.response}\"` : \"\"]\n  }, void 0, true);\n}\n\n_s(Mut, \"8DwAX8eERQxVm2ac2MwsnvCrhjo=\", false, function () {\n  return [useMutation];\n});\n\n_c = Mut;\n\nvar _c;\n\n$RefreshReg$(_c, \"Mut\");","map":{"version":3,"sources":["/Users/danielpiga/Desktop/Apollo2 copy/ApolloReact/apolloclient/src/graphql/mutation/Signup.js"],"names":["React","useState","gql","useMutation","ADD_USER","Mut","addUser","data","loading","user","setUser","name","username","password","e","target","value","variables","console","log","response"],"mappings":";;;;;;AAAA,SAASA,KAAT,EAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,GAAT,EAAcC,WAAd,QAAiC,gBAAjC;AAEA,MAAMC,QAAQ,GAAGF,GAAI;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,CAPA;AASA,eAAe,SAASG,GAAT,GAAe;AAAA;;AAC5B,QAAM,CAACC,OAAD,EAAU;AAAEC,IAAAA,IAAF;AAAQC,IAAAA;AAAR,GAAV,IAA+BL,WAAW,CAACC,QAAD,CAAhD;AACA,QAAM,CAACK,IAAD,EAAOC,OAAP,IAAkBT,QAAQ,CAAC;AAACU,IAAAA,IAAI,EAAE,EAAP;AACjCC,IAAAA,QAAQ,EAAE,EADuB;AAEjCC,IAAAA,QAAQ,EAAE;AAFuB,GAAD,CAAhC;AAGA,sBACE;AAAA,4BACE;AAAO,MAAA,IAAI,EAAC,MAAZ;AAAmB,MAAA,QAAQ,EAAGC,CAAD,IAAOJ,OAAO,CAAC;AAAC,gBAAOI,CAAC,CAACC,MAAF,CAASC,KAAjB;AAAuB,oBAAWP,IAAI,CAACG,QAAvC;AAAgD,oBAAWH,IAAI,CAACI;AAAhE,OAAD,CAA3C;AAAuH,MAAA,WAAW,EAAC;AAAnI;AAAA;AAAA;AAAA;AAAA,YADF,eAEE;AAAO,MAAA,IAAI,EAAC,MAAZ;AAAmB,MAAA,QAAQ,EAAGC,CAAD,IAAK;AAACJ,QAAAA,OAAO,CAAC;AAAC,kBAAOD,IAAI,CAACE,IAAb;AAAkB,sBAAWG,CAAC,CAACC,MAAF,CAASC,KAAtC;AAA4C,sBAAWP,IAAI,CAACI;AAA5D,SAAD,CAAP;AAA+E,OAAlH;AAAmH,MAAA,WAAW,EAAC;AAA/H;AAAA;AAAA;AAAA;AAAA,YAFF,eAGE;AAAO,MAAA,IAAI,EAAC,UAAZ;AAAuB,MAAA,QAAQ,EAAGC,CAAD,IAAK;AAACJ,QAAAA,OAAO,CAAC;AAAC,kBAAOD,IAAI,CAACE,IAAb;AAAkB,sBAAWF,IAAI,CAACG,QAAlC;AAA2C,sBAAWE,CAAC,CAACC,MAAF,CAASC;AAA/D,SAAD,CAAP;AAA+E,OAAtH;AAAwH,MAAA,WAAW,EAAC;AAApI;AAAA;AAAA;AAAA;AAAA,YAHF,eAIE;AAAO,MAAA,IAAI,EAAC,QAAZ;AAA2B,MAAA,KAAK,EAAC,QAAjC;AACE,MAAA,OAAO,EAAE,MAAM;AACbV,QAAAA,OAAO,CAAC;AAAEW,UAAAA,SAAS,EAAER;AAAb,SAAD,CAAP;AAED;AAJH;AAAA;AAAA;AAAA;AAAA,YAJF,eAWE;AACE,MAAA,IAAI,EAAC,QADP;AAEE,MAAA,OAAO,EAAE,MAAMS,OAAO,CAACC,GAAR,CAAYZ,IAAZ,CAFjB;AAEoC,MAAA,KAAK,EAAC;AAF1C;AAAA;AAAA;AAAA;AAAA,YAXF,EAcYE,IAAI,CAACE,IAdjB,EAcuBF,IAAI,CAACG,QAd5B,EAcsCH,IAAI,CAACI,QAd3C,EAeGL,OAAO,gBAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAH,gBAAoB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAf9B,EAgBGD,IAAI,GAAE,gCAA+BA,IAAI,CAACD,OAAL,CAAac,QAAS,GAAvD,GAA0D,EAhBjE;AAAA,kBADF;AAoBD;;GAzBuBf,G;UACeF,W;;;KADfE,G","sourcesContent":["import { React, useState } from \"react\";\nimport { gql, useMutation } from \"@apollo/client\";\n\nconst ADD_USER = gql`\n  mutation($name: String!, $username: String!, $password: String!) {\n    addUser(name: $name, username: $username, password: $password) {\n      response\n      \n    }\n  }\n`;\n\nexport default function Mut() {\n  const [addUser, { data, loading }] = useMutation(ADD_USER);\n  const [user, setUser] = useState({name: \"\",\n  username: \"\",\n  password: \"\",});\n  return (\n    <>\n      <input type=\"text\" onChange={(e) => setUser({\"name\":e.target.value,\"username\":user.username,\"password\":user.password})}placeholder=\"nome\"></input>\n      <input type=\"text\" onChange={(e)=>{setUser({\"name\":user.name,\"username\":e.target.value,\"password\":user.password})}}placeholder=\"username\"></input>\n      <input type=\"password\" onChange={(e)=>{setUser({\"name\":user.name,\"username\":user.username,\"password\":e.target.value})}} placeholder=\"password\"></input>\n      <input type=\"button\"       value=\"submit\"\n        onClick={() => {\n          addUser({ variables: user            \n          });\n        }}\n      ></input>\n      \n      <input\n        type=\"button\"\n        onClick={() => console.log(data)} value=\"consolelog\"\n      ></input>{user.name}{user.username}{user.password}\n      {loading ? <p>loading</p> : <p>done</p>}\n      {data?`User registered successfully ${data.addUser.response}\"`:\"\"}\n    </>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}