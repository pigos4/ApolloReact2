{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/danielpiga/Desktop/Apollo2 copy/ApolloReact/apolloclient/src/route/list/records/records.js\",\n    _s = $RefreshSig$();\n\nimport { useQuery, gql } from \"@apollo/client\";\n\nfunction Delete() {\n  return /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false);\n}\n\n_c = Delete;\nconst RECORDS = gql`\n  query{records{nome\n  id\n  price\n  barcode\n  }}\n`;\nexport default function Records() {\n  _s();\n\n  const {\n    loading,\n    error,\n    data\n  } = useQuery(RECORDS);\n  if (loading) return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"Loading...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 23\n  }, this);\n  if (error) return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"Error :(\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 21\n  }, this);\n  if (data) console.log(data);\n  return data.records.map(res => /*#__PURE__*/_jsxDEV(\"p\", {\n    children: [\"id:\", res.id, \"nome:\", res.nome, \" Price:\", res.price, \" Barcode:\", res.barcode]\n  }, res.id, true, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 5\n  }, this));\n}\n\n_s(Records, \"OQZiY3KqWoytFPIJWw/H9Hrmbok=\", false, function () {\n  return [useQuery];\n});\n\n_c2 = Records;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Delete\");\n$RefreshReg$(_c2, \"Records\");","map":{"version":3,"sources":["/Users/danielpiga/Desktop/Apollo2 copy/ApolloReact/apolloclient/src/route/list/records/records.js"],"names":["useQuery","gql","Delete","RECORDS","Records","loading","error","data","console","log","records","map","res","id","nome","price","barcode"],"mappings":";;;;;;AAAA,SAASA,QAAT,EAAmBC,GAAnB,QAA8B,gBAA9B;;AAGA,SAASC,MAAT,GAAiB;AAEf,sBAEE,qCAFF;AAMD;;KARQA,M;AAaT,MAAMC,OAAO,GAAGF,GAAI;AACpB;AACA;AACA;AACA;AACA;AACA,CANA;AAQA,eAAe,SAASG,OAAT,GAAmB;AAAA;;AAChC,QAAM;AAAEC,IAAAA,OAAF;AAAWC,IAAAA,KAAX;AAAkBC,IAAAA;AAAlB,MAA2BP,QAAQ,CAACG,OAAD,CAAzC;AACA,MAAIE,OAAJ,EAAa,oBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AACb,MAAIC,KAAJ,EAAW,oBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AACX,MAAGC,IAAH,EAASC,OAAO,CAACC,GAAR,CAAYF,IAAZ;AACT,SAAOA,IAAI,CAACG,OAAL,CAAaC,GAAb,CAAkBC,GAAD,iBACtB;AAAA,sBACQA,GAAG,CAACC,EADZ,WAEQD,GAAG,CAACE,IAFZ,aAEyBF,GAAG,CAACG,KAF7B,eAE6CH,GAAG,CAACI,OAFjD;AAAA,KAAQJ,GAAG,CAACC,EAAZ;AAAA;AAAA;AAAA;AAAA,UADK,CAAP;AAMD;;GAXuBT,O;UACWJ,Q;;;MADXI,O","sourcesContent":["import { useQuery, gql } from \"@apollo/client\";\n\n\nfunction Delete(){\n\n  return (\n\n    <>\n    \n    </>\n  )\n}\n\n\n\n\nconst RECORDS = gql`\n  query{records{nome\n  id\n  price\n  barcode\n  }}\n`;\n\nexport default function Records() {\n  const { loading, error, data } = useQuery(RECORDS);\n  if (loading) return <p>Loading...</p>;\n  if (error) return <p>Error :(</p>;\n  if(data )console.log(data);\n  return data.records.map((res) => (\n    <p key={res.id}>\n        id:{res.id}\n      nome:{res.nome} Price:{res.price} Barcode:{res.barcode}\n    </p>\n  ));\n}\n"]},"metadata":{},"sourceType":"module"}