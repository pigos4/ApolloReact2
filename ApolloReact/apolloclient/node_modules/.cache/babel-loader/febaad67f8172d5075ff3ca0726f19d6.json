{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/danielpiga/Desktop/Apollo2 copy/ApolloReact/apolloclient/src/route/Dato.js\",\n    _s2 = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { gql, useMutation, useQuery, useLazyQuery } from \"@apollo/client\";\nexport default function Home() {\n  _s2();\n\n  var _s = $RefreshSig$();\n\n  //const [createRender, setcreaterender] = useState(<CreateRender id=\"101\" />);\n  const [inputsUser, setinputsUser] = useState({\n    id: \"2\",\n    name: \"\",\n    description: \"\",\n    extraInfo: \"\",\n    child: []\n  });\n  const [renderQuery, setrenderQuery] = useState();\n\n  function DelayedQuery() {\n    _s();\n\n    const [getDog, {\n      loading,\n      data\n    }] = useLazyQuery(GET_DOG_PHOTO);\n    if (loading) return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading ...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 23\n    }, this);\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [data && data.dog && /*#__PURE__*/_jsxDEV(\"img\", {\n        src: data.dog.displayImage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 18,\n        columnNumber: 28\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => getDog({\n          variables: {\n            breed: 'bulldog'\n          }\n        }),\n        children: \"Click me!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 19,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 5\n    }, this);\n  }\n\n  _s(DelayedQuery, \"ilhQO2fPtUUXGt7OaXWTS6aBgWo=\", false, function () {\n    return [useLazyQuery];\n  });\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        onChange: e => setinputsUser({ ...inputsUser,\n          name: e.target.value\n        }),\n        placeholder: \"Name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 12\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        onChange: e => setinputsUser({ ...inputsUser,\n          description: e.target.value\n        }),\n        placeholder: \"Descriptio\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        onChange: e => setinputsUser({ ...inputsUser,\n          extraInfo: e.target.value\n        }),\n        placeholder: \"ExtraInfo\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"button\",\n      onClick: () => setrenderQuery( /*#__PURE__*/_jsxDEV(ReqQuery, {\n        name: inputsUser.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 57\n      }, this)),\n      value: \"submit\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }, this), renderQuery]\n  }, void 0, true);\n} //   useEffect(() => {\n//    function ReqQuery(nameRequest){\n//     const DATO=gql`\n//     query dato($name:String){dato(name:$name){name}\n//     }`;\n// //if(nameRequest.name){console.log(nameRequest)\n//      const { loading, error, data } = useQuery(DATO, {variables:  nameRequest.name});\n//   if(data)console.log(data)\n// return(<>ciao</>)\n// }\n// }, [renderQuery])\n//    if (data){console.log(data)}\n//  }\n//  if (loading) return <p>Loading...</p>;\n// if (error) return <p>Error :(</p>;\n//return  data.ciao.map((res)=><p key={res.id}>nome:{res.nome} cognome:{res.cognome}</p>)\n//const [dataInput, { data, loading }] = useMutation(DATA_INPUT);\n// const DATA_INPUT = gql`\n// mutation($username: String!, $password: String!, ) {\n//   loginUser(  username: $username, password:$password) {\n//     id,\n//     username,\n//     status\n//   }\n// }\n// `;\n// const dat = [\n//   { id: 1, name: \"javascript\", moreData: \"more info\", children: [101, 102] },\n//   { id: 101, name: \"Array\", moreData: \"aaarraaayy\", children: [103, 104] },\n//   { id: 102, name: \"Object\", moreData: \"ooobbbjjject\", children: [105, 106] },\n//   {\n//     id: 103,\n//     name: \"Arrayspec1\",\n//     moreData: \"aaarraaayy\",\n//     children: [107, 108],\n//   },\n//   {\n//     id: 104,\n//     name: \"Arrayspec2\",\n//     moreData: \"ooobbbjjject\",\n//     children: [101, 102],\n//   },\n//   {\n//     id: 105,\n//     name: \"objectspec1\",\n//     moreData: \"aaarraaayy\",\n//     children: [101, 102],\n//   },\n//   {\n//     id: 106,\n//     name: \"Objectspec2\",\n//     moreData: \"ooobbbjjject\",\n//     children: [101, 102],\n//   },\n//   {\n//     id: 107,\n//     name: \"Objectspec3\",\n//     moreData: \"ooobbbjjject\",\n//     children: [101, 102],\n//   },\n//   {\n//     id: 108,\n//     name: \"Objectspec4\",\n//     moreData: \"ooobbbjjject\",\n//     children: [101, 102],\n//   },\n// ];\n// function buttonNameFromArray(id) {\n//   let obj = dat.find((s) => s.id === id);\n//   console.log(obj, \"objbutton\");\n//   return (\n//     <input\n//       type=\"button\"\n//       value={obj.name}\n//       key={obj.id}\n//       onClick={() => setcreaterender(<CreateRender id={obj.id} />)}\n//     ></input>\n//   );\n// }\n// function CreateRender(props) {\n//   console.log(props.id, \"propsid\");\n//   let obj = dat.findIndex((x) => x.id === parseInt(props.id));\n//   console.log(obj, \"obj\");\n//   return (\n//     <>\n//       <div>\n//         nome madre:{dat[obj].name} figli:\n//         {dat[obj].children.map((id) => buttonNameFromArray(id))}\n//       </div>\n//     </>\n//   );\n// }\n\n_s2(Home, \"gbKDaUcnjojvhOxafQ7jdmnYJDs=\");\n\n_c = Home;\n\nvar _c;\n\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"sources":["/Users/danielpiga/Desktop/Apollo2 copy/ApolloReact/apolloclient/src/route/Dato.js"],"names":["React","useState","useEffect","gql","useMutation","useQuery","useLazyQuery","Home","inputsUser","setinputsUser","id","name","description","extraInfo","child","renderQuery","setrenderQuery","DelayedQuery","getDog","loading","data","GET_DOG_PHOTO","dog","displayImage","variables","breed","e","target","value"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,GAAT,EAAcC,WAAd,EAA2BC,QAA3B,EAAoCC,YAApC,QAAwD,gBAAxD;AACA,eAAe,SAASC,IAAT,GAAgB;AAAA;;AAAA;;AAC7B;AACA,QAAM,CAACC,UAAD,EAAYC,aAAZ,IAA2BR,QAAQ,CAAC;AAACS,IAAAA,EAAE,EAAC,GAAJ;AAAQC,IAAAA,IAAI,EAAC,EAAb;AAAgBC,IAAAA,WAAW,EAAC,EAA5B;AAA+BC,IAAAA,SAAS,EAAC,EAAzC;AAA4CC,IAAAA,KAAK,EAAC;AAAlD,GAAD,CAAzC;AACD,QAAM,CAACC,WAAD,EAAaC,cAAb,IAA6Bf,QAAQ,EAA3C;;AAKA,WAASgB,YAAT,GAAwB;AAAA;;AACvB,UAAM,CAACC,MAAD,EAAS;AAAEC,MAAAA,OAAF;AAAWC,MAAAA;AAAX,KAAT,IAA8Bd,YAAY,CAACe,aAAD,CAAhD;AAEA,QAAIF,OAAJ,EAAa,oBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAP;AAEb,wBACE;AAAA,iBACGC,IAAI,IAAIA,IAAI,CAACE,GAAb,iBAAoB;AAAK,QAAA,GAAG,EAAEF,IAAI,CAACE,GAAL,CAASC;AAAnB;AAAA;AAAA;AAAA;AAAA,cADvB,eAEE;AAAQ,QAAA,OAAO,EAAE,MAAML,MAAM,CAAC;AAAEM,UAAAA,SAAS,EAAE;AAAEC,YAAAA,KAAK,EAAE;AAAT;AAAb,SAAD,CAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AAQD;;AArB8B,KAQrBR,YARqB;AAAA,YASOX,YATP;AAAA;;AAyB7B,sBACE;AAAA,4BACE;AAAA,8BAAK;AAAO,QAAA,IAAI,EAAC,MAAZ;AAAmB,QAAA,QAAQ,EAAIoB,CAAD,IAAKjB,aAAa,CAAC,EAAC,GAAGD,UAAJ;AAAgBG,UAAAA,IAAI,EAACe,CAAC,CAACC,MAAF,CAASC;AAA9B,SAAD,CAAhD;AAAyF,QAAA,WAAW,EAAC;AAArG;AAAA;AAAA;AAAA;AAAA,cAAL,eACA;AAAO,QAAA,IAAI,EAAC,MAAZ;AAAmB,QAAA,QAAQ,EAAIF,CAAD,IAAKjB,aAAa,CAAC,EAAC,GAAGD,UAAJ;AAAgBI,UAAAA,WAAW,EAACc,CAAC,CAACC,MAAF,CAASC;AAArC,SAAD,CAAhD;AAAgG,QAAA,WAAW,EAAC;AAA5G;AAAA;AAAA;AAAA;AAAA,cADA,eAGA;AAAO,QAAA,IAAI,EAAC,MAAZ;AAAmB,QAAA,QAAQ,EAAIF,CAAD,IAAKjB,aAAa,CAAC,EAAC,GAAGD,UAAJ;AAAgBK,UAAAA,SAAS,EAACa,CAAC,CAACC,MAAF,CAASC;AAAnC,SAAD,CAAhD;AAA8F,QAAA,WAAW,EAAC;AAA1G;AAAA;AAAA;AAAA;AAAA,cAHA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAKE;AAAO,MAAA,IAAI,EAAC,QAAZ;AAAqB,MAAA,OAAO,EAAG,MAAIZ,cAAc,eAAC,QAAC,QAAD;AAAU,QAAA,IAAI,EAAGR,UAAU,CAACG;AAA5B;AAAA;AAAA;AAAA;AAAA,cAAD,CAAjD;AAA0F,MAAA,KAAK,EAAC;AAAhG;AAAA;AAAA;AAAA;AAAA,YALF,EAOGI,WAPH;AAAA,kBADF;AAWD,C,CACD;AAGA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACC;AACC;AACE;AACA;AACC;AAMJ;AAEC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;IA5IsBR,I;;KAAAA,I","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { gql, useMutation, useQuery,useLazyQuery } from \"@apollo/client\";\nexport default function Home() {\n  //const [createRender, setcreaterender] = useState(<CreateRender id=\"101\" />);\n  const [inputsUser,setinputsUser]=useState({id:\"2\",name:\"\",description:\"\",extraInfo:\"\",child:[]});\n const [renderQuery,setrenderQuery]=useState()\n\n \n\n\n function DelayedQuery() {\n  const [getDog, { loading, data }] = useLazyQuery(GET_DOG_PHOTO);\n\n  if (loading) return <p>Loading ...</p>;\n\n  return (\n    <div>\n      {data && data.dog && <img src={data.dog.displayImage} />}\n      <button onClick={() => getDog({ variables: { breed: 'bulldog' } })}>\n        Click me!\n      </button>\n    </div>\n  );\n}\n\n\n\n  return (\n    <>\n      <div><input type=\"text\" onChange={((e)=>setinputsUser({...inputsUser ,name:e.target.value}))} placeholder=\"Name\"></input>\n      <input type=\"text\" onChange={((e)=>setinputsUser({...inputsUser ,description:e.target.value}))} placeholder=\"Descriptio\"></input>\n      \n      <input type=\"text\" onChange={((e)=>setinputsUser({...inputsUser ,extraInfo:e.target.value}))} placeholder=\"ExtraInfo\"></input></div>\n      <input type=\"button\" onClick={(()=>setrenderQuery(<ReqQuery name={(inputsUser.name)}/>))} value=\"submit\"></input>\n      \n      {renderQuery}\n    </>\n  );\n}\n//   useEffect(() => {\n    \n  \n//    function ReqQuery(nameRequest){\n//     const DATO=gql`\n\n//     query dato($name:String){dato(name:$name){name}\n//     }`;\n// //if(nameRequest.name){console.log(nameRequest)\n//      const { loading, error, data } = useQuery(DATO, {variables:  nameRequest.name});\n//   if(data)console.log(data)\n\n// return(<>ciao</>)\n// }\n// }, [renderQuery])\n //    if (data){console.log(data)}\n  //  }\n    //  if (loading) return <p>Loading...</p>;\n    // if (error) return <p>Error :(</p>;\n     //return  data.ciao.map((res)=><p key={res.id}>nome:{res.nome} cognome:{res.cognome}</p>)\n    \n     \n    \n \n\n //const [dataInput, { data, loading }] = useMutation(DATA_INPUT);\n\n  // const DATA_INPUT = gql`\n  // mutation($username: String!, $password: String!, ) {\n  //   loginUser(  username: $username, password:$password) {\n  //     id,\n  //     username,\n  //     status\n  //   }\n  // }\n  // `;\n  // const dat = [\n  //   { id: 1, name: \"javascript\", moreData: \"more info\", children: [101, 102] },\n  //   { id: 101, name: \"Array\", moreData: \"aaarraaayy\", children: [103, 104] },\n  //   { id: 102, name: \"Object\", moreData: \"ooobbbjjject\", children: [105, 106] },\n\n  //   {\n  //     id: 103,\n  //     name: \"Arrayspec1\",\n  //     moreData: \"aaarraaayy\",\n  //     children: [107, 108],\n  //   },\n  //   {\n  //     id: 104,\n  //     name: \"Arrayspec2\",\n  //     moreData: \"ooobbbjjject\",\n  //     children: [101, 102],\n  //   },\n\n  //   {\n  //     id: 105,\n  //     name: \"objectspec1\",\n  //     moreData: \"aaarraaayy\",\n  //     children: [101, 102],\n  //   },\n  //   {\n  //     id: 106,\n  //     name: \"Objectspec2\",\n  //     moreData: \"ooobbbjjject\",\n  //     children: [101, 102],\n  //   },\n  //   {\n  //     id: 107,\n  //     name: \"Objectspec3\",\n  //     moreData: \"ooobbbjjject\",\n  //     children: [101, 102],\n  //   },\n  //   {\n  //     id: 108,\n  //     name: \"Objectspec4\",\n  //     moreData: \"ooobbbjjject\",\n  //     children: [101, 102],\n  //   },\n  // ];\n  // function buttonNameFromArray(id) {\n  //   let obj = dat.find((s) => s.id === id);\n  //   console.log(obj, \"objbutton\");\n  //   return (\n  //     <input\n  //       type=\"button\"\n  //       value={obj.name}\n  //       key={obj.id}\n  //       onClick={() => setcreaterender(<CreateRender id={obj.id} />)}\n  //     ></input>\n  //   );\n  // }\n  // function CreateRender(props) {\n  //   console.log(props.id, \"propsid\");\n  //   let obj = dat.findIndex((x) => x.id === parseInt(props.id));\n  //   console.log(obj, \"obj\");\n  //   return (\n  //     <>\n  //       <div>\n  //         nome madre:{dat[obj].name} figli:\n  //         {dat[obj].children.map((id) => buttonNameFromArray(id))}\n  //       </div>\n  //     </>\n  //   );\n  // }\n"]},"metadata":{},"sourceType":"module"}