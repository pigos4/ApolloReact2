{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/danielpiga/Desktop/Apollo2 copy/ApolloReact/apolloclient/src/route/Crypto.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { gql, useLazyQuery } from \"@apollo/client\";\nexport default function CRYPTO() {\n  _s();\n\n  const [result, setresult] = useState({\n    name: \"\",\n    value: []\n  });\n  const [callQuery, setcallQuery] = useState(false);\n  const CRYPTO = gql`\n  query crypto($symb: String) {\n    crypto(symb: $symb) {\n      name\n      value\n    }\n  }\n`;\n  const [getFields, {\n    loading,\n    data\n  }] = useLazyQuery(CRYPTO);\n  const [inputsUser, setinputsUser] = useState({\n    symbol: undefined\n  }); //   if(callQuery){\n  //     setInterval(function intervalRef(){\n  //         getFields({ variables: { symb: inputsUser.symbol } })\n  //     }, 5000)}\n\n  useEffect(() => {\n    if (data) {\n      console.log(data);\n      setresult({\n        name: data.crypto.name,\n        value: [...result.value, data.crypto.value]\n      });\n    }\n\n    const interval = setInterval(() => {\n      getFields({\n        variables: {\n          symb: inputsUser.symbol\n        }\n      });\n    }, 1000);\n    return () => clearInterval(interval);\n  }, [data, callQuery]);\n  useEffect(() => {\n    const interval = setInterval(() => {\n      console.log('This will run every second!');\n    }, 1000);\n    return () => clearInterval(interval);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      onChange: e => setinputsUser({\n        symbol: e.target.value\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 6\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"submit\",\n      onClick: () => setcallQuery(true)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 6\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"submit\",\n      onClick: () => console.log('')\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 6\n    }, this), /*#__PURE__*/_jsxDEV(RenderResults, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 6\n    }, this)]\n  }, void 0, true);\n}\n\n_s(CRYPTO, \"Vmv8rExdPxuOsdrvNY5pMh9wI/M=\", false, function () {\n  return [useLazyQuery];\n});\n\n_c = CRYPTO;\n\nvar _c;\n\n$RefreshReg$(_c, \"CRYPTO\");","map":{"version":3,"sources":["/Users/danielpiga/Desktop/Apollo2 copy/ApolloReact/apolloclient/src/route/Crypto.js"],"names":["React","useState","useEffect","gql","useLazyQuery","CRYPTO","result","setresult","name","value","callQuery","setcallQuery","getFields","loading","data","inputsUser","setinputsUser","symbol","undefined","console","log","crypto","interval","setInterval","variables","symb","clearInterval","e","target"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA0C,OAA1C;AACA,SAASC,GAAT,EAAcC,YAAd,QAAkC,gBAAlC;AAEA,eAAe,SAASC,MAAT,GAAkB;AAAA;;AACjC,QAAM,CAACC,MAAD,EAAQC,SAAR,IAAmBN,QAAQ,CAAC;AAACO,IAAAA,IAAI,EAAC,EAAN;AAASC,IAAAA,KAAK,EAAC;AAAf,GAAD,CAAjC;AACA,QAAM,CAACC,SAAD,EAAWC,YAAX,IAAyBV,QAAQ,CAAC,KAAD,CAAvC;AAIE,QAAMI,MAAM,GAAGF,GAAI;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,CAPE;AAQF,QAAM,CAACS,SAAD,EAAY;AAAEC,IAAAA,OAAF;AAAWC,IAAAA;AAAX,GAAZ,IAAiCV,YAAY,CAACC,MAAD,CAAnD;AACC,QAAM,CAACU,UAAD,EAAaC,aAAb,IAA8Bf,QAAQ,CAAC;AAC1CgB,IAAAA,MAAM,EAAEC;AADkC,GAAD,CAA5C,CAfgC,CAmBjC;AACA;AACA;AAEA;;AACEhB,EAAAA,SAAS,CAAC,MAAM;AAKd,QAAGY,IAAH,EAAQ;AACJK,MAAAA,OAAO,CAACC,GAAR,CAAYN,IAAZ;AACAP,MAAAA,SAAS,CAAC;AAACC,QAAAA,IAAI,EAACM,IAAI,CAACO,MAAL,CAAYb,IAAlB;AAAuBC,QAAAA,KAAK,EAAC,CAAC,GAAGH,MAAM,CAACG,KAAX,EAAiBK,IAAI,CAACO,MAAL,CAAYZ,KAA7B;AAA7B,OAAD,CAAT;AACD;;AAED,UAAMa,QAAQ,GAAGC,WAAW,CAAC,MAAM;AAACX,MAAAA,SAAS,CAAC;AAAEY,QAAAA,SAAS,EAAE;AAAEC,UAAAA,IAAI,EAAEV,UAAU,CAACE;AAAnB;AAAb,OAAD,CAAT;AACnC,KAD2B,EACzB,IADyB,CAA5B;AAEA,WAAO,MAAMS,aAAa,CAACJ,QAAD,CAA1B;AACH,GAbQ,EAaP,CAACR,IAAD,EAAMJ,SAAN,CAbO,CAAT;AAeAR,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMoB,QAAQ,GAAGC,WAAW,CAAC,MAAM;AACjCJ,MAAAA,OAAO,CAACC,GAAR,CAAY,6BAAZ;AACD,KAF2B,EAEzB,IAFyB,CAA5B;AAGA,WAAO,MAAMM,aAAa,CAACJ,QAAD,CAA1B;AACD,GALQ,EAKN,EALM,CAAT;AAMD,sBACI;AAAA,4BACA;AAAO,MAAA,IAAI,EAAC,MAAZ;AAAmB,MAAA,QAAQ,EAAGK,CAAD,IAAKX,aAAa,CAAC;AAACC,QAAAA,MAAM,EAACU,CAAC,CAACC,MAAF,CAASnB;AAAjB,OAAD;AAA/C;AAAA;AAAA;AAAA;AAAA,YADA,eAEA;AAAO,MAAA,IAAI,EAAC,QAAZ;AAAqB,MAAA,OAAO,EAAE,MAAIE,YAAY,CAAC,IAAD;AAA9C;AAAA;AAAA;AAAA;AAAA,YAFA,eAGA;AAAO,MAAA,IAAI,EAAC,QAAZ;AAAqB,MAAA,OAAO,EAAE,MAAIQ,OAAO,CAACC,GAAR,CAAY,EAAZ;AAAlC;AAAA;AAAA;AAAA;AAAA,YAHA,eAIA,QAAC,aAAD;AAAA;AAAA;AAAA;AAAA,YAJA;AAAA,kBADJ;AAOE;;GApDqBf,M;UAceD,Y;;;KAdfC,M","sourcesContent":["import React, { useState, useEffect} from \"react\";\nimport { gql, useLazyQuery } from \"@apollo/client\";\n\nexport default function CRYPTO() {\nconst [result,setresult]=useState({name:\"\",value:[]})\nconst [callQuery,setcallQuery]=useState(false)\n\n\n\n  const CRYPTO = gql`\n  query crypto($symb: String) {\n    crypto(symb: $symb) {\n      name\n      value\n    }\n  }\n`;\nconst [getFields, { loading, data }] = useLazyQuery(CRYPTO);\n const [inputsUser, setinputsUser] = useState({\n    symbol: undefined,\n    \n  });\n//   if(callQuery){\n//     setInterval(function intervalRef(){\n//         getFields({ variables: { symb: inputsUser.symbol } })\n        \n//     }, 5000)}\n  useEffect(() => {\n     \n\n\n      \n    if(data){\n        console.log(data)\n        setresult({name:data.crypto.name,value:[...result.value,data.crypto.value]})\n      }  \n\n      const interval = setInterval(() => {getFields({ variables: { symb: inputsUser.symbol } })\n      }, 1000);\n      return () => clearInterval(interval);\n  },[data,callQuery])\n  \n  useEffect(() => {\n    const interval = setInterval(() => {\n      console.log('This will run every second!');\n    }, 1000);\n    return () => clearInterval(interval);\n  }, []);\n return (\n     <>\n     <input type=\"text\" onChange={(e)=>setinputsUser({symbol:e.target.value})}></input>\n     <input type=\"submit\" onClick={()=>setcallQuery(true)}></input>\n     <input type=\"submit\" onClick={()=>console.log('')}></input>\n     <RenderResults/>\n     </>\n )}\n\n\n\n \n  "]},"metadata":{},"sourceType":"module"}