{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/danielpiga/Desktop/Apollo2 copy/ApolloReact/apolloclient/src/route/list/records/records.js\",\n    _s = $RefreshSig$();\n\nimport { useQuery, gql } from \"@apollo/client\";\nconst RECORDS = gql`\n  query records {\n      name\n      id\n      barcode\n      price\n    \n  }\n`;\nexport default function Records() {\n  _s();\n\n  const {\n    loading,\n    error,\n    data\n  } = useQuery(RECORDS);\n  if (loading) return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"Loading...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 15,\n    columnNumber: 23\n  }, this);\n  if (error) return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"Error :(\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 16,\n    columnNumber: 21\n  }, this);\n  console.log(data); //   return data.records.map((res) => (\n  //     <p key={res.id}>\n  //       nome:{res.nome} cognome:{res.price}\n  //     </p>\n  //   ));\n}\n\n_s(Records, \"OQZiY3KqWoytFPIJWw/H9Hrmbok=\", false, function () {\n  return [useQuery];\n});\n\n_c = Records;\n\nvar _c;\n\n$RefreshReg$(_c, \"Records\");","map":{"version":3,"sources":["/Users/danielpiga/Desktop/Apollo2 copy/ApolloReact/apolloclient/src/route/list/records/records.js"],"names":["useQuery","gql","RECORDS","Records","loading","error","data","console","log"],"mappings":";;;;;AAAA,SAASA,QAAT,EAAmBC,GAAnB,QAA8B,gBAA9B;AAEA,MAAMC,OAAO,GAAGD,GAAI;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CARA;AAUA,eAAe,SAASE,OAAT,GAAmB;AAAA;;AAChC,QAAM;AAAEC,IAAAA,OAAF;AAAWC,IAAAA,KAAX;AAAkBC,IAAAA;AAAlB,MAA2BN,QAAQ,CAACE,OAAD,CAAzC;AACA,MAAIE,OAAJ,EAAa,oBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AACb,MAAIC,KAAJ,EAAW,oBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AACXE,EAAAA,OAAO,CAACC,GAAR,CAAYF,IAAZ,EAJgC,CAKlC;AACA;AACA;AACA;AACA;AACC;;GAVuBH,O;UACWH,Q;;;KADXG,O","sourcesContent":["import { useQuery, gql } from \"@apollo/client\";\n\nconst RECORDS = gql`\n  query records {\n      name\n      id\n      barcode\n      price\n    \n  }\n`;\n\nexport default function Records() {\n  const { loading, error, data } = useQuery(RECORDS);\n  if (loading) return <p>Loading...</p>;\n  if (error) return <p>Error :(</p>;\n  console.log(data);\n//   return data.records.map((res) => (\n//     <p key={res.id}>\n//       nome:{res.nome} cognome:{res.price}\n//     </p>\n//   ));\n}\n"]},"metadata":{},"sourceType":"module"}