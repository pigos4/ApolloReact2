{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/danielpiga/Desktop/apollo2copia/ApolloReact2/ApolloReact/apolloclient/src/route/Dato/DatoIdToRender.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { gql, useMutation, useLazyQuery } from \"@apollo/client\";\nexport default function Dato() {\n  _s();\n\n  const [newTopic, setNewTopic] = useState();\n  const [idToRende, setidTorender] = useState(\"36\");\n  const [functionToRender, setfunctionToRender] = useState(\"\");\n\n  function Funct(prop) {\n    console.log(prop, \"prop\");\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Name:\", prop.data.dato.name]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 13,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Description:\", prop.data.dato.Description]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 14,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Info:\", prop.data.dato.info]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 15,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"father\", prop.data.dato.father]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 16,\n          columnNumber: 15\n        }, this), prop.data.dato.child.map((x, index) => /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"button\",\n            value: x.Name,\n            onClick: () => setidTorender(`${x.ID}`)\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 20,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 26,\n            columnNumber: 19\n          }, this)]\n        }, void 0, true)), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            onChange: () => setNewTopic()\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 30,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            onChange: () => setNewTopic({ ...inputsUser,\n              description: e.target.value\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 31,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            onChange: e => setNewTopic({ ...newTopic,\n              extraInfo: e.target.value\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 32,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 29,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 12,\n        columnNumber: 13\n      }, this)\n    }, void 0, false);\n  }\n\n  const DATO = gql`\n          query dato($id: String) {\n            dato(id: $id) {\n              name\n              info\n              Description\n              father\n              child {\n                ID\n                Name\n              }\n            }\n          }\n        `;\n  const [getFields, {\n    loading,\n    data\n  }] = useLazyQuery(DATO);\n  useEffect(() => {\n    getFields({\n      variables: {\n        id: idToRende\n      }\n    });\n\n    if (data) {\n      console.log(data);\n      setfunctionToRender( /*#__PURE__*/_jsxDEV(Funct, {\n        data: data\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 33\n      }, this));\n    }\n\n    return () => {\n      getFields({\n        variables: {\n          id: idToRende\n        }\n      });\n\n      if (data) {\n        console.log(data);\n        setfunctionToRender( /*#__PURE__*/_jsxDEV(Funct, {\n          data: data\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 33\n        }, this));\n      }\n    };\n  }, [data, getFields, idToRende]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [functionToRender, idToRende]\n  }, void 0, true);\n}\n\n_s(Dato, \"XX6Uexmtv4fN67Nxy4spdKyjEWw=\", false, function () {\n  return [useLazyQuery];\n});\n\n_c = Dato;\n\nvar _c;\n\n$RefreshReg$(_c, \"Dato\");","map":{"version":3,"sources":["/Users/danielpiga/Desktop/apollo2copia/ApolloReact2/ApolloReact/apolloclient/src/route/Dato/DatoIdToRender.js"],"names":["React","useState","useEffect","gql","useMutation","useLazyQuery","Dato","newTopic","setNewTopic","idToRende","setidTorender","functionToRender","setfunctionToRender","Funct","prop","console","log","data","dato","name","Description","info","father","child","map","x","index","Name","ID","inputsUser","description","e","target","value","extraInfo","DATO","getFields","loading","variables","id"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { gql, useMutation, useLazyQuery } from \"@apollo/client\";\nexport default function Dato() {\n    const [newTopic,setNewTopic]=useState()\n\n    const [idToRende, setidTorender] = useState(\"36\");\n  const [functionToRender, setfunctionToRender] = useState(\"\");\n    function Funct(prop) {\n        console.log(prop, \"prop\");\n        return (\n          <>\n            <div>\n              <p>Name:{prop.data.dato.name}</p>\n              <p>Description:{prop.data.dato.Description}</p>\n              <p>Info:{prop.data.dato.info}</p>\n              <p>father{prop.data.dato.father}</p>\n    \n              {prop.data.dato.child.map((x, index) => (\n                <>\n                  <input\n                    type=\"button\"\n                    key={index}\n                    value={x.Name}\n                    onClick={() => setidTorender(`${x.ID}`)}\n                  ></input>\n                  <br></br>\n                </>\n              ))}\n              <div>\n                <input type=\"text\" onChange={()=>setNewTopic()}></input>\n                <input type=\"text\" onChange={()=>setNewTopic({ ...inputsUser, description: e.target.value })}></input>\n                <input type=\"text\" onChange={(e)=>setNewTopic({ ...newTopic, extraInfo: e.target.value })}></input>\n\n\n\n\n              </div>\n            </div>\n          </>\n        );\n      }\n   \n        const DATO = gql`\n          query dato($id: String) {\n            dato(id: $id) {\n              name\n              info\n              Description\n              father\n              child {\n                ID\n                Name\n              }\n            }\n          }\n        `;\n        const [getFields, { loading, data }] = useLazyQuery(DATO);\n        useEffect(() => {\n          getFields({ variables: { id: idToRende } });\n         \n          if (data) {\n            console.log(data);\n            setfunctionToRender(<Funct data={data} />);\n          }\n          return () => {\n            \n          getFields({ variables: { id: idToRende } });\n          if (data) {\n            console.log(data);\n            setfunctionToRender(<Funct data={data} />);\n          }\n        };\n        \n        }, [data, getFields, idToRende]);\n        return <>{functionToRender}{idToRende}</>;\n      }\n      \n    \n      \n\n\n"]},"metadata":{},"sourceType":"module"}