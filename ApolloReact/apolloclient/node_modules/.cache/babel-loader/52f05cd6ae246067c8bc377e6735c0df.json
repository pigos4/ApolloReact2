{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/danielpiga/Desktop/Apollo2 copy/ApolloReact/apolloclient/src/route/Crypto.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useRef, useLayoutEffect } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { gql, useMutation, useLazyQuery } from \"@apollo/client\";\nexport default function CRYPTO() {\n  _s();\n\n  const CRYPTO = gql`\n    query crypto($symb: String) {\n      crypto(symb: $symb) {\n        name\n        value\n      }\n    }\n  `;\n  const [getFields, {\n    loading,\n    data\n  }] = useLazyQuery(CRYPTO);\n  const [inputsUser, setinputsUser] = useState({\n    symbol: undefined\n  });\n\n  if (data) {}\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      onChange: e => setinputsUser({\n        symbol: e.target.value\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"submit\",\n      onClick: () => getFields({\n        variables: {\n          symb: inputsUser.symbol\n        }\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"submit\",\n      onClick: () => console.log()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\n_s(CRYPTO, \"+ztLg9SK9zMN+wYp3CPcV+3Z1Ew=\", false, function () {\n  return [useLazyQuery];\n});\n\n_c = CRYPTO;\n\nvar _c;\n\n$RefreshReg$(_c, \"CRYPTO\");","map":{"version":3,"sources":["/Users/danielpiga/Desktop/Apollo2 copy/ApolloReact/apolloclient/src/route/Crypto.js"],"names":["React","useState","useEffect","useRef","useLayoutEffect","ReactDOM","gql","useMutation","useLazyQuery","CRYPTO","getFields","loading","data","inputsUser","setinputsUser","symbol","undefined","e","target","value","variables","symb","console","log"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,EAAoCC,MAApC,EAA4CC,eAA5C,QAAmE,OAAnE;AAEA,OAAOC,QAAP,MAAqB,WAArB;AACA,SAASC,GAAT,EAAcC,WAAd,EAA2BC,YAA3B,QAA+C,gBAA/C;AAEA,eAAe,SAASC,MAAT,GAAkB;AAAA;;AAC/B,QAAMA,MAAM,GAAGH,GAAI;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,GAPE;AAQA,QAAM,CAACI,SAAD,EAAY;AAAEC,IAAAA,OAAF;AAAWC,IAAAA;AAAX,GAAZ,IAAiCJ,YAAY,CAACC,MAAD,CAAnD;AACA,QAAM,CAACI,UAAD,EAAaC,aAAb,IAA8Bb,QAAQ,CAAC;AAC3Cc,IAAAA,MAAM,EAAEC;AADmC,GAAD,CAA5C;;AAGA,MAAIJ,IAAJ,EAAU,CACT;;AAED,sBACE;AAAA,4BACE;AACE,MAAA,IAAI,EAAC,MADP;AAEE,MAAA,QAAQ,EAAGK,CAAD,IAAOH,aAAa,CAAC;AAAEC,QAAAA,MAAM,EAAEE,CAAC,CAACC,MAAF,CAASC;AAAnB,OAAD;AAFhC;AAAA;AAAA;AAAA;AAAA,YADF,eAKE;AACE,MAAA,IAAI,EAAC,QADP;AAEE,MAAA,OAAO,EAAE,MAAMT,SAAS,CAAC;AAAEU,QAAAA,SAAS,EAAE;AAAEC,UAAAA,IAAI,EAAER,UAAU,CAACE;AAAnB;AAAb,OAAD;AAF1B;AAAA;AAAA;AAAA;AAAA,YALF,eAUE;AAAO,MAAA,IAAI,EAAC,QAAZ;AAAqB,MAAA,OAAO,EAAE,MAAMO,OAAO,CAACC,GAAR;AAApC;AAAA;AAAA;AAAA;AAAA,YAVF,eAWE;AAAA;AAAA;AAAA;AAAA,YAXF;AAAA,kBADF;AAeD;;GA/BuBd,M;UASiBD,Y;;;KATjBC,M","sourcesContent":["import React, { useState, useEffect,useRef, useLayoutEffect } from \"react\";\n\nimport ReactDOM from \"react-dom\";\nimport { gql, useMutation, useLazyQuery } from \"@apollo/client\";\n\nexport default function CRYPTO() {\n  const CRYPTO = gql`\n    query crypto($symb: String) {\n      crypto(symb: $symb) {\n        name\n        value\n      }\n    }\n  `;\n  const [getFields, { loading, data }] = useLazyQuery(CRYPTO);\n  const [inputsUser, setinputsUser] = useState({\n    symbol: undefined,\n  });\n  if (data) {\n  }\n\n  return (\n    <>\n      <input\n        type=\"text\"\n        onChange={(e) => setinputsUser({ symbol: e.target.value })}\n      ></input>\n      <input\n        type=\"submit\"\n        onClick={() => getFields({ variables: { symb: inputsUser.symbol } })}\n      ></input>\n\n      <input type=\"submit\" onClick={() => console.log()}></input>\n      <canvas></canvas>\n    </>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}