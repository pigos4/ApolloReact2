{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/danielpiga/Desktop/Apollo2 copy/ApolloReact/apolloclient/src/route/Dato.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { gql, useMutation, useQuery, useLazyQuery } from \"@apollo/client\";\nexport default function Home() {\n  _s();\n\n  //const [createRender, setcreaterender] = useState(<CreateRender id=\"101\" />);\n  const [inputsUser, setinputsUser] = useState({\n    id: \"2\",\n    name: \"\",\n    description: \"\",\n    extraInfo: \"\",\n    child: []\n  });\n  const [renderQuery, setrenderQuery] = useState();\n  const [renderDataLoading, setrenderDataLoading] = useState();\n  const DATO = gql`\n       query dato($name:String){dato(name:$name){name}\n       }`;\n  const [getFields, {\n    loading,\n    data\n  }] = useLazyQuery(DATO);\n\n  if (data) {\n    console.log(\"data\");\n  }\n\n  if (loading) {\n    setrenderDataLoading(\"loading\");\n  } //   if (loading) return <p>Loading ...</p>;\n  //   return (\n  //     <div>\n  //       {data && data.dog && <img src={data.dog.displayImage} />}\n  //       <button onClick={() => getFields({ variables: { name: inputsUser.name } })}>\n  //         Click me!\n  //       </button>\n  //     </div>\n  //   );\n  // }\n\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        onChange: e => setinputsUser({ ...inputsUser,\n          name: e.target.value\n        }),\n        placeholder: \"Name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 12\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        onChange: e => setinputsUser({ ...inputsUser,\n          description: e.target.value\n        }),\n        placeholder: \"Descriptio\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        onChange: e => setinputsUser({ ...inputsUser,\n          extraInfo: e.target.value\n        }),\n        placeholder: \"ExtraInfo\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"button\",\n      onClick: () => getFields({\n        variables: {\n          name: inputsUser.name\n        }\n      }),\n      value: \"submit\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this), renderDataLoading, renderQuery]\n  }, void 0, true);\n} //   useEffect(() => {\n//    function ReqQuery(nameRequest){\n//     const DATO=gql`\n//     query dato($name:String){dato(name:$name){name}\n//     }`;\n// //if(nameRequest.name){console.log(nameRequest)\n//      const { loading, error, data } = useQuery(DATO, {variables:  nameRequest.name});\n//   if(data)console.log(data)\n// return(<>ciao</>)\n// }\n// }, [renderQuery])\n//    if (data){console.log(data)}\n//  }\n//  if (loading) return <p>Loading...</p>;\n// if (error) return <p>Error :(</p>;\n//return  data.ciao.map((res)=><p key={res.id}>nome:{res.nome} cognome:{res.cognome}</p>)\n//const [dataInput, { data, loading }] = useMutation(DATA_INPUT);\n// const DATA_INPUT = gql`\n// mutation($username: String!, $password: String!, ) {\n//   loginUser(  username: $username, password:$password) {\n//     id,\n//     username,\n//     status\n//   }\n// }\n// `;\n// const dat = [\n//   { id: 1, name: \"javascript\", moreData: \"more info\", children: [101, 102] },\n//   { id: 101, name: \"Array\", moreData: \"aaarraaayy\", children: [103, 104] },\n//   { id: 102, name: \"Object\", moreData: \"ooobbbjjject\", children: [105, 106] },\n//   {\n//     id: 103,\n//     name: \"Arrayspec1\",\n//     moreData: \"aaarraaayy\",\n//     children: [107, 108],\n//   },\n//   {\n//     id: 104,\n//     name: \"Arrayspec2\",\n//     moreData: \"ooobbbjjject\",\n//     children: [101, 102],\n//   },\n//   {\n//     id: 105,\n//     name: \"objectspec1\",\n//     moreData: \"aaarraaayy\",\n//     children: [101, 102],\n//   },\n//   {\n//     id: 106,\n//     name: \"Objectspec2\",\n//     moreData: \"ooobbbjjject\",\n//     children: [101, 102],\n//   },\n//   {\n//     id: 107,\n//     name: \"Objectspec3\",\n//     moreData: \"ooobbbjjject\",\n//     children: [101, 102],\n//   },\n//   {\n//     id: 108,\n//     name: \"Objectspec4\",\n//     moreData: \"ooobbbjjject\",\n//     children: [101, 102],\n//   },\n// ];\n// function buttonNameFromArray(id) {\n//   let obj = dat.find((s) => s.id === id);\n//   console.log(obj, \"objbutton\");\n//   return (\n//     <input\n//       type=\"button\"\n//       value={obj.name}\n//       key={obj.id}\n//       onClick={() => setcreaterender(<CreateRender id={obj.id} />)}\n//     ></input>\n//   );\n// }\n// function CreateRender(props) {\n//   console.log(props.id, \"propsid\");\n//   let obj = dat.findIndex((x) => x.id === parseInt(props.id));\n//   console.log(obj, \"obj\");\n//   return (\n//     <>\n//       <div>\n//         nome madre:{dat[obj].name} figli:\n//         {dat[obj].children.map((id) => buttonNameFromArray(id))}\n//       </div>\n//     </>\n//   );\n// }\n\n_s(Home, \"ow+pjX3fsSR7tiVPG+NhFIRhOrA=\", false, function () {\n  return [useLazyQuery];\n});\n\n_c = Home;\n\nvar _c;\n\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"sources":["/Users/danielpiga/Desktop/Apollo2 copy/ApolloReact/apolloclient/src/route/Dato.js"],"names":["React","useState","useEffect","gql","useMutation","useQuery","useLazyQuery","Home","inputsUser","setinputsUser","id","name","description","extraInfo","child","renderQuery","setrenderQuery","renderDataLoading","setrenderDataLoading","DATO","getFields","loading","data","console","log","e","target","value","variables"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { gql, useMutation, useQuery,useLazyQuery } from \"@apollo/client\";\nexport default function Home() {\n  //const [createRender, setcreaterender] = useState(<CreateRender id=\"101\" />);\n  const [inputsUser,setinputsUser]=useState({id:\"2\",name:\"\",description:\"\",extraInfo:\"\",child:[]});\n const [renderQuery,setrenderQuery]=useState();\n const [renderDataLoading,setrenderDataLoading]=useState();\n \n const DATO=gql`\n       query dato($name:String){dato(name:$name){name}\n       }`;\n  const [getFields, { loading, data }] = useLazyQuery(DATO);\n\n  \n       if(data){console.log(\"data\")}\n\n       if(loading){setrenderDataLoading(\"loading\")}\n\n//   if (loading) return <p>Loading ...</p>;\n\n//   return (\n//     <div>\n//       {data && data.dog && <img src={data.dog.displayImage} />}\n//       <button onClick={() => getFields({ variables: { name: inputsUser.name } })}>\n//         Click me!\n//       </button>\n//     </div>\n//   );\n// }\n\n\n\n  return (\n    <>\n      <div><input type=\"text\" onChange={((e)=>setinputsUser({...inputsUser ,name:e.target.value}))} placeholder=\"Name\"></input>\n      <input type=\"text\" onChange={((e)=>setinputsUser({...inputsUser ,description:e.target.value}))} placeholder=\"Descriptio\"></input>\n      <input type=\"text\" onChange={((e)=>setinputsUser({...inputsUser ,extraInfo:e.target.value}))} placeholder=\"ExtraInfo\"></input></div>\n      <input type=\"button\" onClick={(()=>getFields({ variables: { name: inputsUser.name } }))} value=\"submit\"></input>\n      {renderDataLoading}\n      {renderQuery}\n    </>\n  );\n}\n//   useEffect(() => {\n    \n  \n//    function ReqQuery(nameRequest){\n//     const DATO=gql`\n\n//     query dato($name:String){dato(name:$name){name}\n//     }`;\n// //if(nameRequest.name){console.log(nameRequest)\n//      const { loading, error, data } = useQuery(DATO, {variables:  nameRequest.name});\n//   if(data)console.log(data)\n\n// return(<>ciao</>)\n// }\n// }, [renderQuery])\n //    if (data){console.log(data)}\n  //  }\n    //  if (loading) return <p>Loading...</p>;\n    // if (error) return <p>Error :(</p>;\n     //return  data.ciao.map((res)=><p key={res.id}>nome:{res.nome} cognome:{res.cognome}</p>)\n    \n     \n    \n \n\n //const [dataInput, { data, loading }] = useMutation(DATA_INPUT);\n\n  // const DATA_INPUT = gql`\n  // mutation($username: String!, $password: String!, ) {\n  //   loginUser(  username: $username, password:$password) {\n  //     id,\n  //     username,\n  //     status\n  //   }\n  // }\n  // `;\n  // const dat = [\n  //   { id: 1, name: \"javascript\", moreData: \"more info\", children: [101, 102] },\n  //   { id: 101, name: \"Array\", moreData: \"aaarraaayy\", children: [103, 104] },\n  //   { id: 102, name: \"Object\", moreData: \"ooobbbjjject\", children: [105, 106] },\n\n  //   {\n  //     id: 103,\n  //     name: \"Arrayspec1\",\n  //     moreData: \"aaarraaayy\",\n  //     children: [107, 108],\n  //   },\n  //   {\n  //     id: 104,\n  //     name: \"Arrayspec2\",\n  //     moreData: \"ooobbbjjject\",\n  //     children: [101, 102],\n  //   },\n\n  //   {\n  //     id: 105,\n  //     name: \"objectspec1\",\n  //     moreData: \"aaarraaayy\",\n  //     children: [101, 102],\n  //   },\n  //   {\n  //     id: 106,\n  //     name: \"Objectspec2\",\n  //     moreData: \"ooobbbjjject\",\n  //     children: [101, 102],\n  //   },\n  //   {\n  //     id: 107,\n  //     name: \"Objectspec3\",\n  //     moreData: \"ooobbbjjject\",\n  //     children: [101, 102],\n  //   },\n  //   {\n  //     id: 108,\n  //     name: \"Objectspec4\",\n  //     moreData: \"ooobbbjjject\",\n  //     children: [101, 102],\n  //   },\n  // ];\n  // function buttonNameFromArray(id) {\n  //   let obj = dat.find((s) => s.id === id);\n  //   console.log(obj, \"objbutton\");\n  //   return (\n  //     <input\n  //       type=\"button\"\n  //       value={obj.name}\n  //       key={obj.id}\n  //       onClick={() => setcreaterender(<CreateRender id={obj.id} />)}\n  //     ></input>\n  //   );\n  // }\n  // function CreateRender(props) {\n  //   console.log(props.id, \"propsid\");\n  //   let obj = dat.findIndex((x) => x.id === parseInt(props.id));\n  //   console.log(obj, \"obj\");\n  //   return (\n  //     <>\n  //       <div>\n  //         nome madre:{dat[obj].name} figli:\n  //         {dat[obj].children.map((id) => buttonNameFromArray(id))}\n  //       </div>\n  //     </>\n  //   );\n  // }\n"]},"metadata":{},"sourceType":"module"}