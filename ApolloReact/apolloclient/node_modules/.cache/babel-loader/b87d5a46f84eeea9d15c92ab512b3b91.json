{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/danielpiga/Desktop/Apollo2 copy/ApolloReact/apolloclient/src/route/Crypto.js\",\n    _s2 = $RefreshSig$();\n\nimport React, { useState, useEffect, useRef, useLayoutEffect } from \"react\";\nimport { gql, useMutation, useLazyQuery } from \"@apollo/client\";\nimport ReactDOM from \"react-dom\";\nexport default function CRYPTO() {\n  _s2();\n\n  var _s = $RefreshSig$();\n\n  const MyCanvas = (props = {}) => {\n    _s();\n\n    const {\n      width = 100,\n      height = 100,\n      pixelRatio = window.devicePixelRatio\n    } = props;\n    const CRYPTO = gql`\n    query crypto($symb: String) {\n      crypto(symb: $symb) {\n        name\n        value\n      }\n    }\n  `;\n    const [getFields, {\n      loading,\n      data\n    }] = useLazyQuery(CRYPTO);\n    const [inputsUser, setinputsUser] = useState({\n      symbol: undefined\n    });\n\n    if (data) {}\n\n    const dw = Math.floor(pixelRatio * width);\n    const dh = Math.floor(pixelRatio * height);\n    const style = {\n      width,\n      height\n    };\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        onChange: e => setinputsUser({\n          symbol: e.target.value\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"submit\",\n        onClick: () => getFields({\n          variables: {\n            symb: inputsUser.symbol\n          }\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"submit\",\n        onClick: () => console.log()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n        ref: canvas,\n        width: dw,\n        height: dh,\n        style: style\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true);\n  };\n\n  _s(MyCanvas, \"+ztLg9SK9zMN+wYp3CPcV+3Z1Ew=\", false, function () {\n    return [useLazyQuery];\n  });\n\n  const canvas = useRef(null);\n  return;\n}\n\n_s2(CRYPTO, \"OiAXxxxsYj+jaR+r4tdEB3xCcqw=\");\n\n_c = CRYPTO;\n;\n\nvar _c;\n\n$RefreshReg$(_c, \"CRYPTO\");","map":{"version":3,"sources":["/Users/danielpiga/Desktop/Apollo2 copy/ApolloReact/apolloclient/src/route/Crypto.js"],"names":["React","useState","useEffect","useRef","useLayoutEffect","gql","useMutation","useLazyQuery","ReactDOM","CRYPTO","MyCanvas","props","width","height","pixelRatio","window","devicePixelRatio","getFields","loading","data","inputsUser","setinputsUser","symbol","undefined","dw","Math","floor","dh","style","e","target","value","variables","symb","console","log","canvas"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,EAAoCC,MAApC,EAA4CC,eAA5C,QAAoE,OAApE;AACA,SAASC,GAAT,EAAcC,WAAd,EAA2BC,YAA3B,QAA+C,gBAA/C;AACA,OAAOC,QAAP,MAAqB,WAArB;AAEA,eAAe,SAASC,MAAT,GAAkB;AAAA;;AAAA;;AAC7B,QAAMC,QAAQ,GAAG,CAACC,KAAK,GAAG,EAAT,KAAgB;AAAA;;AAC7B,UAAM;AACJC,MAAAA,KAAK,GAAG,GADJ;AAEJC,MAAAA,MAAM,GAAG,GAFL;AAGJC,MAAAA,UAAU,GAAGC,MAAM,CAACC;AAHhB,QAIFL,KAJJ;AAKN,UAAMF,MAAM,GAAGJ,GAAI;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,GAPE;AAQA,UAAM,CAACY,SAAD,EAAY;AAAEC,MAAAA,OAAF;AAAWC,MAAAA;AAAX,KAAZ,IAAiCZ,YAAY,CAACE,MAAD,CAAnD;AACA,UAAM,CAACW,UAAD,EAAaC,aAAb,IAA8BpB,QAAQ,CAAC;AAC3CqB,MAAAA,MAAM,EAAEC;AADmC,KAAD,CAA5C;;AAGA,QAAIJ,IAAJ,EAAU,CACT;;AACD,UAAMK,EAAE,GAAGC,IAAI,CAACC,KAAL,CAAWZ,UAAU,GAAGF,KAAxB,CAAX;AACA,UAAMe,EAAE,GAAGF,IAAI,CAACC,KAAL,CAAWZ,UAAU,GAAGD,MAAxB,CAAX;AACA,UAAMe,KAAK,GAAG;AAAEhB,MAAAA,KAAF;AAASC,MAAAA;AAAT,KAAd;AACA,wBACE;AAAA,8BACE;AACE,QAAA,IAAI,EAAC,MADP;AAEE,QAAA,QAAQ,EAAGgB,CAAD,IAAOR,aAAa,CAAC;AAAEC,UAAAA,MAAM,EAAEO,CAAC,CAACC,MAAF,CAASC;AAAnB,SAAD;AAFhC;AAAA;AAAA;AAAA;AAAA,cADF,eAKE;AACE,QAAA,IAAI,EAAC,QADP;AAEE,QAAA,OAAO,EAAE,MAAMd,SAAS,CAAC;AAAEe,UAAAA,SAAS,EAAE;AAAEC,YAAAA,IAAI,EAAEb,UAAU,CAACE;AAAnB;AAAb,SAAD;AAF1B;AAAA;AAAA;AAAA;AAAA,cALF,eAUE;AAAO,QAAA,IAAI,EAAC,QAAZ;AAAqB,QAAA,OAAO,EAAE,MAAMY,OAAO,CAACC,GAAR;AAApC;AAAA;AAAA;AAAA;AAAA,cAVF,eAWE;AAAQ,QAAA,GAAG,EAAEC,MAAb;AAAqB,QAAA,KAAK,EAAEZ,EAA5B;AAAgC,QAAA,MAAM,EAAEG,EAAxC;AAA4C,QAAA,KAAK,EAAEC;AAAnD;AAAA;AAAA;AAAA;AAAA,cAXF;AAAA,oBADF;AAeD,GAtCG;;AAD6B,KACvBlB,QADuB;AAAA,YAeQH,YAfR;AAAA;;AA4C/B,QAAM6B,MAAM,GAAGjC,MAAM,CAAC,IAAD,CAArB;AAMA;AACD;;IAnDuBM,M;;KAAAA,M;AAmDvB","sourcesContent":["import React, { useState, useEffect,useRef, useLayoutEffect  } from \"react\";\nimport { gql, useMutation, useLazyQuery } from \"@apollo/client\";\nimport ReactDOM from \"react-dom\";\n\nexport default function CRYPTO() {\n    const MyCanvas = (props = {}) => {\n        const {\n          width = 100,\n          height = 100,\n          pixelRatio = window.devicePixelRatio\n        } = props;\n  const CRYPTO = gql`\n    query crypto($symb: String) {\n      crypto(symb: $symb) {\n        name\n        value\n      }\n    }\n  `;\n  const [getFields, { loading, data }] = useLazyQuery(CRYPTO);\n  const [inputsUser, setinputsUser] = useState({\n    symbol: undefined,\n  });\n  if (data) {\n  }\n  const dw = Math.floor(pixelRatio * width);\n  const dh = Math.floor(pixelRatio * height);\n  const style = { width, height };\n  return (\n    <>\n      <input\n        type=\"text\"\n        onChange={(e) => setinputsUser({ symbol: e.target.value })}\n      ></input>\n      <input\n        type=\"submit\"\n        onClick={() => getFields({ variables: { symb: inputsUser.symbol } })}\n      ></input>\n\n      <input type=\"submit\" onClick={() => console.log()}></input>\n      <canvas ref={canvas} width={dw} height={dh} style={style} />\n    </>\n  );\n}\n\n\n\n\n  const canvas = useRef(null);\n\n  \n\n\n  \n  return ;\n};\n"]},"metadata":{},"sourceType":"module"}