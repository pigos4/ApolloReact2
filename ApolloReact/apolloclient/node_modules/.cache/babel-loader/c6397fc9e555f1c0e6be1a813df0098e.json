{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/danielpiga/Desktop/Apollo2 copy/ApolloReact/apolloclient/src/route/Crypto.js\",\n    _s2 = $RefreshSig$();\n\nimport React, { useState, useEffect, useRef, useLayoutEffect } from \"react\";\nimport { gql, useMutation, useLazyQuery } from \"@apollo/client\";\n\nfunction Char() {\n  var _s = $RefreshSig$();\n\n  const MyCanvas = (props = {}) => {\n    _s();\n\n    const {\n      width = 100,\n      height = 100,\n      pixelRatio = window.devicePixelRatio\n    } = props;\n    const canvas = useRef(null);\n    useLayoutEffect(() => {\n      const context = canvas.current.getContext(\"2d\");\n      context.save();\n      context.moveTo(0, 0);\n      context.lineTo(200, 100);\n      context.stroke();\n      context.restore();\n    });\n    const dw = Math.floor(pixelRatio * width);\n    const dh = Math.floor(pixelRatio * height);\n    const style = {\n      width,\n      height\n    };\n    return /*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: canvas,\n      width: dw,\n      height: dh,\n      style: style\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 11\n    }, this);\n  };\n\n  _s(MyCanvas, \"Q3lITeWN+kKLI5OU/24+oVPqDuI=\");\n}\n\n_c = Char;\nexport default function CRYPTO() {\n  _s2();\n\n  const CRYPTO = gql`\n  query crypto($symb: String) {\n    crypto(symb: $symb) {\n      name\n      value\n    }\n  }\n`;\n  const [getFields, {\n    loading,\n    data\n  }] = useLazyQuery(CRYPTO);\n  const [inputsUser, setinputsUser] = useState({\n    symbol: undefined\n  });\n\n  if (data) {}\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      onChange: e => setinputsUser({\n        symbol: e.target.value\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 6\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"submit\",\n      onClick: () => getFields({\n        variables: {\n          symb: inputsUser.symbol\n        }\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 6\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"submit\",\n      onClick: () => console.log(\"\")\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 6\n    }, this)]\n  }, void 0, true);\n}\n\n_s2(CRYPTO, \"7T3elbT2H3OUrUcySWoHgg7Zjpc=\", false, function () {\n  return [useLazyQuery];\n});\n\n_c2 = CRYPTO;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Char\");\n$RefreshReg$(_c2, \"CRYPTO\");","map":{"version":3,"sources":["/Users/danielpiga/Desktop/Apollo2 copy/ApolloReact/apolloclient/src/route/Crypto.js"],"names":["React","useState","useEffect","useRef","useLayoutEffect","gql","useMutation","useLazyQuery","Char","MyCanvas","props","width","height","pixelRatio","window","devicePixelRatio","canvas","context","current","getContext","save","moveTo","lineTo","stroke","restore","dw","Math","floor","dh","style","CRYPTO","getFields","loading","data","inputsUser","setinputsUser","symbol","undefined","e","target","value","variables","symb","console","log"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,EAAoCC,MAApC,EAA4CC,eAA5C,QAAmE,OAAnE;AACA,SAASC,GAAT,EAAcC,WAAd,EAA4BC,YAA5B,QAAgD,gBAAhD;;AAEA,SAASC,IAAT,GAAe;AAAA;;AACf,QAAMC,QAAQ,GAAG,CAACC,KAAK,GAAG,EAAT,KAAgB;AAAA;;AAC/B,UAAM;AACJC,MAAAA,KAAK,GAAG,GADJ;AAEJC,MAAAA,MAAM,GAAG,GAFL;AAGJC,MAAAA,UAAU,GAAGC,MAAM,CAACC;AAHhB,QAIFL,KAJJ;AAMA,UAAMM,MAAM,GAAGb,MAAM,CAAC,IAAD,CAArB;AAEAC,IAAAA,eAAe,CAAC,MAAM;AACpB,YAAMa,OAAO,GAAGD,MAAM,CAACE,OAAP,CAAeC,UAAf,CAA0B,IAA1B,CAAhB;AAEAF,MAAAA,OAAO,CAACG,IAAR;AACAH,MAAAA,OAAO,CAACI,MAAR,CAAe,CAAf,EAAiB,CAAjB;AACAJ,MAAAA,OAAO,CAACK,MAAR,CAAe,GAAf,EAAmB,GAAnB;AAEDL,MAAAA,OAAO,CAACM,MAAR;AACCN,MAAAA,OAAO,CAACO,OAAR;AACD,KATc,CAAf;AAYA,UAAMC,EAAE,GAAGC,IAAI,CAACC,KAAL,CAAWd,UAAU,GAAGF,KAAxB,CAAX;AACA,UAAMiB,EAAE,GAAGF,IAAI,CAACC,KAAL,CAAWd,UAAU,GAAGD,MAAxB,CAAX;AACA,UAAMiB,KAAK,GAAG;AAAElB,MAAAA,KAAF;AAASC,MAAAA;AAAT,KAAd;AACA,wBAAQ;AAAQ,MAAA,GAAG,EAAEI,MAAb;AAAqB,MAAA,KAAK,EAAES,EAA5B;AAAgC,MAAA,MAAM,EAAEG,EAAxC;AAA4C,MAAA,KAAK,EAAEC;AAAnD;AAAA;AAAA;AAAA;AAAA,YAAR;AACD,GAzBD;;AADe,KACTpB,QADS;AA2Bd;;KA3BQD,I;AA6BT,eAAe,SAASsB,MAAT,GAAkB;AAAA;;AAC/B,QAAMA,MAAM,GAAGzB,GAAI;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,CAPE;AAQF,QAAM,CAAC0B,SAAD,EAAY;AAAEC,IAAAA,OAAF;AAAWC,IAAAA;AAAX,GAAZ,IAAiC1B,YAAY,CAACuB,MAAD,CAAnD;AACC,QAAM,CAACI,UAAD,EAAaC,aAAb,IAA8BlC,QAAQ,CAAC;AAC1CmC,IAAAA,MAAM,EAAEC;AADkC,GAAD,CAA5C;;AAIC,MAAGJ,IAAH,EAAQ,CAEP;;AAEF,sBACI;AAAA,4BACA;AAAO,MAAA,IAAI,EAAC,MAAZ;AAAmB,MAAA,QAAQ,EAAGK,CAAD,IAAKH,aAAa,CAAC;AAACC,QAAAA,MAAM,EAACE,CAAC,CAACC,MAAF,CAASC;AAAjB,OAAD;AAA/C;AAAA;AAAA;AAAA;AAAA,YADA,eAEA;AAAO,MAAA,IAAI,EAAC,QAAZ;AAAqB,MAAA,OAAO,EAAE,MAAIT,SAAS,CAAC;AAAEU,QAAAA,SAAS,EAAE;AAAEC,UAAAA,IAAI,EAAER,UAAU,CAACE;AAAnB;AAAb,OAAD;AAA3C;AAAA;AAAA;AAAA;AAAA,YAFA,eAIA;AAAO,MAAA,IAAI,EAAC,QAAZ;AAAqB,MAAA,OAAO,EAAE,MAAKO,OAAO,CAACC,GAAR,CAAY,EAAZ;AAAnC;AAAA;AAAA;AAAA;AAAA,YAJA;AAAA,kBADJ;AAaE;;IA/BqBd,M;UASevB,Y;;;MATfuB,M","sourcesContent":["import React, { useState, useEffect,useRef, useLayoutEffect } from \"react\";\nimport { gql, useMutation,  useLazyQuery } from \"@apollo/client\";\n\nfunction Char(){\nconst MyCanvas = (props = {}) => {\n  const {\n    width = 100,\n    height = 100,\n    pixelRatio = window.devicePixelRatio\n  } = props;\n\n  const canvas = useRef(null);\n\n  useLayoutEffect(() => {\n    const context = canvas.current.getContext(\"2d\");\n\n    context.save();\n    context.moveTo(0,0);\n    context.lineTo(200,100);\n\n   context.stroke();\n    context.restore();\n  });\n\n\n  const dw = Math.floor(pixelRatio * width);\n  const dh = Math.floor(pixelRatio * height);\n  const style = { width, height };\n  return (<canvas ref={canvas} width={dw} height={dh} style={style} />);\n};\n}\n\nexport default function CRYPTO() {\n  const CRYPTO = gql`\n  query crypto($symb: String) {\n    crypto(symb: $symb) {\n      name\n      value\n    }\n  }\n`;\nconst [getFields, { loading, data }] = useLazyQuery(CRYPTO);\n const [inputsUser, setinputsUser] = useState({\n    symbol: undefined,\n    \n  });\n  if(data){\n\n  }\n\n return (\n     <>\n     <input type=\"text\" onChange={(e)=>setinputsUser({symbol:e.target.value})}></input>\n     <input type=\"submit\" onClick={()=>getFields({ variables: { symb: inputsUser.symbol } })}></input>\n\n     <input type=\"submit\" onClick={()=> console.log(\"\")}></input>\n     \n    \n     \n     \n     \n     \n     </>\n )}\n\n \n  "]},"metadata":{},"sourceType":"module"}