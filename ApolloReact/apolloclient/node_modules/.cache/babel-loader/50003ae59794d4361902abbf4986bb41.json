{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/danielpiga/Desktop/apollo2copia/ApolloReact2/ApolloReact/apolloclient/src/route/Dato.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { gql, useMutation, useLazyQuery } from \"@apollo/client\";\nr;\nexport default function Home() {\n  _s();\n\n  function enderChild(props) {\n    return props.map(x => /*#__PURE__*/_jsxDEV(\"p\", {\n      children: x.Name\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 8,\n      columnNumber: 5\n    }, this));\n  }\n\n  const [functionToRender, setfunctionToRender] = useState(\"\");\n\n  function Funct(prop) {\n    console.log(prop, \"prop\");\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Name:\", prop.data.dato.name]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 26,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Description:\", prop.data.dato.Description]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 27,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Info:\", prop.data.dato.info]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 28,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"father\", prop.data.dato.father]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 29,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 9\n      }, this)\n    }, void 0, false);\n  }\n\n  const DATO = gql`\n  query dato($id: String) {\n    dato(id: $id) {\n      name\n      info\n      Description\n      father\n      child{\n        ID\n        Name\n      }\n    }\n  }\n`;\n  const [getFields, {\n    loading,\n    data\n  }] = useLazyQuery(DATO);\n  useEffect(() => {\n    if (data) {\n      console.log(data);\n      setfunctionToRender( /*#__PURE__*/_jsxDEV(Funct, {\n        data: data\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 49\n      }, this));\n    }\n  }, [data]); // {\n  //   \"dato\": {\n  //       \"__typename\": \"Dato\",\n  //       \"name\": \"Javascript\",\n  //       \"info\": \"Language\",\n  //       \"Description\": \"coding\",\n  //       \"father\": 0,\n  //       \"child\": [\n  //           {\n  //               \"__typename\": \"Childs\",\n  //               \"ID\": 37,\n  //               \"Name\": \"ciao\"\n  //           },\n  //           {\n  //               \"__typename\": \"Childs\",\n  //               \"ID\": 38,\n  //               \"Name\": \"ciao\"\n  //           }\n  //       ]\n  //   }\n  // }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [functionToRender, /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"button\",\n        onClick: () => getFields({\n          variables: {\n            id: \"36\"\n          }\n        }),\n        value: \"Javascript\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 1\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 1\n    }, this)\n  }, void 0, false);\n}\n\n_s(Home, \"bChhK0wW5XyvgJ3/aGR/PY2g5js=\", false, function () {\n  return [useLazyQuery];\n});\n\n_c = Home;\n\nvar _c;\n\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"sources":["/Users/danielpiga/Desktop/apollo2copia/ApolloReact2/ApolloReact/apolloclient/src/route/Dato.js"],"names":["React","useState","useEffect","gql","useMutation","useLazyQuery","r","Home","enderChild","props","map","x","Name","functionToRender","setfunctionToRender","Funct","prop","console","log","data","dato","name","Description","info","father","DATO","getFields","loading","variables","id"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,GAAT,EAAcC,WAAd,EAA2BC,YAA3B,QAA+C,gBAA/C;AACAC,CAAC;AACD,eAAe,SAASC,IAAT,GAAgB;AAAA;;AAC/B,WAASC,UAAT,CAAoBC,KAApB,EAA0B;AAExB,WAAOA,KAAK,CAACC,GAAN,CAAWC,CAAD,iBACf;AAAA,gBAAIA,CAAC,CAACC;AAAN;AAAA;AAAA;AAAA;AAAA,YADK,CAAP;AASD;;AAID,QAAM,CAACC,gBAAD,EAAkBC,mBAAlB,IAAuCb,QAAQ,CAAC,EAAD,CAArD;;AACE,WAASc,KAAT,CAAeC,IAAf,EAAoB;AAClBC,IAAAA,OAAO,CAACC,GAAR,CAAYF,IAAZ,EAAiB,MAAjB;AACA,wBACI;AAAA,6BACA;AAAA,gCACE;AAAA,8BAASA,IAAI,CAACG,IAAL,CAAUC,IAAV,CAAeC,IAAxB;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE;AAAA,qCAAgBL,IAAI,CAACG,IAAL,CAAUC,IAAV,CAAeE,WAA/B;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFF,eAGE;AAAA,8BAASN,IAAI,CAACG,IAAL,CAAUC,IAAV,CAAeG,IAAxB;AAAA;AAAA;AAAA;AAAA;AAAA,gBAHF,eAIE;AAAA,+BAAUP,IAAI,CAACG,IAAL,CAAUC,IAAV,CAAeI,MAAzB;AAAA;AAAA;AAAA;AAAA;AAAA,gBAJF;AAAA;AAAA;AAAA;AAAA;AAAA;AADA,qBADJ;AAWD;;AAGD,QAAMC,IAAI,GAAGtB,GAAI;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAbE;AAeF,QAAM,CAACuB,SAAD,EAAY;AAAEC,IAAAA,OAAF;AAAWR,IAAAA;AAAX,GAAZ,IAAiCd,YAAY,CAACoB,IAAD,CAAnD;AACAvB,EAAAA,SAAS,CAAC,MAAM;AAEhB,QAAGiB,IAAH,EAAQ;AAACF,MAAAA,OAAO,CAACC,GAAR,CAAYC,IAAZ;AAAmBL,MAAAA,mBAAmB,eAAC,QAAC,KAAD;AAAO,QAAA,IAAI,EAAEK;AAAb;AAAA;AAAA;AAAA;AAAA,cAAD,CAAnB;AAA0C;AAErE,GAJQ,EAIN,CAACA,IAAD,CAJM,CAAT,CAjD+B,CAwD/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAWA,sBACA;AAAA,2BACA;AAAA,iBACGN,gBADH,eAEA;AAAO,QAAA,IAAI,EAAC,QAAZ;AAAqB,QAAA,OAAO,EAAE,MAAIa,SAAS,CAAC;AAAEE,UAAAA,SAAS,EAAE;AAAEC,YAAAA,EAAE,EAAE;AAAN;AAAb,SAAD,CAA3C;AAA0E,QAAA,KAAK,EAAC;AAAhF;AAAA;AAAA;AAAA;AAAA,cAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA,mBADA;AAaC;;GApGuBtB,I;UAgDeF,Y;;;KAhDfE,I","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { gql, useMutation, useLazyQuery } from \"@apollo/client\";\nr\nexport default function Home() {\nfunction enderChild(props){\n\n  return props.map((x)=>(\n    <p>{x.Name}</p>\n\n\n\n  ))\n\n\n\n}\n\n\n\nconst [functionToRender,setfunctionToRender]=useState(\"\");\n  function Funct(prop){\n    console.log(prop,\"prop\")\n    return (\n        <>\n        <div>\n          <p>Name:{prop.data.dato.name}</p>\n          <p>Description:{prop.data.dato.Description}</p>\n          <p>Info:{prop.data.dato.info}</p>\n          <p>father{prop.data.dato.father}</p>\n        </div>\n        </>\n    )\n\n  }\n\n\n  const DATO = gql`\n  query dato($id: String) {\n    dato(id: $id) {\n      name\n      info\n      Description\n      father\n      child{\n        ID\n        Name\n      }\n    }\n  }\n`;\n\nconst [getFields, { loading, data }] = useLazyQuery(DATO);\nuseEffect(() => {\n  \nif(data){console.log(data); setfunctionToRender(<Funct data={data}/>)}\n \n}, [data])\n\n\n// {\n//   \"dato\": {\n//       \"__typename\": \"Dato\",\n//       \"name\": \"Javascript\",\n//       \"info\": \"Language\",\n//       \"Description\": \"coding\",\n//       \"father\": 0,\n//       \"child\": [\n//           {\n//               \"__typename\": \"Childs\",\n//               \"ID\": 37,\n//               \"Name\": \"ciao\"\n//           },\n//           {\n//               \"__typename\": \"Childs\",\n//               \"ID\": 38,\n//               \"Name\": \"ciao\"\n//           }\n//       ]\n//   }\n// }\n\n\n\n\n\n\n\n\n\n\nreturn(\n<>\n<div>\n  {functionToRender}\n<input type=\"button\" onClick={()=>getFields({ variables: { id: \"36\" } })} value=\"Javascript\"></input>\n\n</div>\n</>\n\n)\n\n\n\n}\n"]},"metadata":{},"sourceType":"module"}