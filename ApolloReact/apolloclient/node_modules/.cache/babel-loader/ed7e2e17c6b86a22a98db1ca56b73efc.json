{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/danielpiga/Desktop/Apollo2 copy/ApolloReact/apolloclient/src/route/Crypto.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { useState, useEffect, useRef, useLayoutEffect } from \"react\";\nimport { gql, useMutation, useLazyQuery } from \"@apollo/client\";\n\nconst MyCanvas = (props = {}) => {\n  _s();\n\n  const {\n    width = 100,\n    height = 100,\n    pixelRatio = window.devicePixelRatio\n  } = props;\n  console.log('');\n  const canvas = useRef(null);\n  useLayoutEffect(() => {\n    const context = canvas.current.getContext(\"2d\");\n    context.save();\n    context.moveTo(0, 0);\n    context.lineTo(200, 100);\n    context.stroke();\n    context.restore();\n  });\n  const dw = Math.floor(pixelRatio * width);\n  const dh = Math.floor(pixelRatio * height);\n  const style = {\n    width,\n    height\n  };\n  return /*#__PURE__*/_jsxDEV(\"canvas\", {\n    ref: canvas,\n    width: dw,\n    height: dh,\n    style: style\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 11\n  }, this);\n};\n\n_s(MyCanvas, \"Q3lITeWN+kKLI5OU/24+oVPqDuI=\");\n\n_c = MyCanvas;\nexport default function CRYPTO() {\n  _s2();\n\n  const CRYPTO = gql`\n  query crypto($symb: String) {\n    crypto(symb: $symb) {\n      name\n      value\n    }\n  }\n`;\n  const [getFields, {\n    loading,\n    data\n  }] = useLazyQuery(CRYPTO);\n  const [inputsUser, setinputsUser] = useState({\n    symbol: undefined\n  });\n\n  if (data) {}\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      onChange: e => setinputsUser({\n        symbol: e.target.value\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 6\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"submit\",\n      onClick: () => getFields({\n        variables: {\n          symb: inputsUser.symbol\n        }\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 6\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"submit\",\n      onClick: () => console.log(\"\")\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 6\n    }, this), /*#__PURE__*/_jsxDEV(MyCanvas, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 6\n    }, this)]\n  }, void 0, true);\n}\n\n_s2(CRYPTO, \"7T3elbT2H3OUrUcySWoHgg7Zjpc=\", false, function () {\n  return [useLazyQuery];\n});\n\n_c2 = CRYPTO;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"MyCanvas\");\n$RefreshReg$(_c2, \"CRYPTO\");","map":{"version":3,"sources":["/Users/danielpiga/Desktop/Apollo2 copy/ApolloReact/apolloclient/src/route/Crypto.js"],"names":["React","useState","useEffect","useRef","useLayoutEffect","gql","useMutation","useLazyQuery","MyCanvas","props","width","height","pixelRatio","window","devicePixelRatio","console","log","canvas","context","current","getContext","save","moveTo","lineTo","stroke","restore","dw","Math","floor","dh","style","CRYPTO","getFields","loading","data","inputsUser","setinputsUser","symbol","undefined","e","target","value","variables","symb"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,EAAoCC,MAApC,EAA4CC,eAA5C,QAAmE,OAAnE;AACA,SAASC,GAAT,EAAcC,WAAd,EAA4BC,YAA5B,QAAgD,gBAAhD;;AAEA,MAAMC,QAAQ,GAAG,CAACC,KAAK,GAAG,EAAT,KAAgB;AAAA;;AAC/B,QAAM;AACJC,IAAAA,KAAK,GAAG,GADJ;AAEJC,IAAAA,MAAM,GAAG,GAFL;AAGJC,IAAAA,UAAU,GAAGC,MAAM,CAACC;AAHhB,MAIFL,KAJJ;AAKFM,EAAAA,OAAO,CAACC,GAAR,CAAY,EAAZ;AACE,QAAMC,MAAM,GAAGd,MAAM,CAAC,IAAD,CAArB;AAEAC,EAAAA,eAAe,CAAC,MAAM;AACpB,UAAMc,OAAO,GAAGD,MAAM,CAACE,OAAP,CAAeC,UAAf,CAA0B,IAA1B,CAAhB;AAEAF,IAAAA,OAAO,CAACG,IAAR;AACAH,IAAAA,OAAO,CAACI,MAAR,CAAe,CAAf,EAAiB,CAAjB;AACAJ,IAAAA,OAAO,CAACK,MAAR,CAAe,GAAf,EAAmB,GAAnB;AAEDL,IAAAA,OAAO,CAACM,MAAR;AACCN,IAAAA,OAAO,CAACO,OAAR;AACD,GATc,CAAf;AAYA,QAAMC,EAAE,GAAGC,IAAI,CAACC,KAAL,CAAWhB,UAAU,GAAGF,KAAxB,CAAX;AACA,QAAMmB,EAAE,GAAGF,IAAI,CAACC,KAAL,CAAWhB,UAAU,GAAGD,MAAxB,CAAX;AACA,QAAMmB,KAAK,GAAG;AAAEpB,IAAAA,KAAF;AAASC,IAAAA;AAAT,GAAd;AACA,sBAAQ;AAAQ,IAAA,GAAG,EAAEM,MAAb;AAAqB,IAAA,KAAK,EAAES,EAA5B;AAAgC,IAAA,MAAM,EAAEG,EAAxC;AAA4C,IAAA,KAAK,EAAEC;AAAnD;AAAA;AAAA;AAAA;AAAA,UAAR;AACD,CAzBD;;GAAMtB,Q;;KAAAA,Q;AA4BN,eAAe,SAASuB,MAAT,GAAkB;AAAA;;AAC/B,QAAMA,MAAM,GAAG1B,GAAI;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,CAPE;AAQF,QAAM,CAAC2B,SAAD,EAAY;AAAEC,IAAAA,OAAF;AAAWC,IAAAA;AAAX,GAAZ,IAAiC3B,YAAY,CAACwB,MAAD,CAAnD;AACC,QAAM,CAACI,UAAD,EAAaC,aAAb,IAA8BnC,QAAQ,CAAC;AAC1CoC,IAAAA,MAAM,EAAEC;AADkC,GAAD,CAA5C;;AAIC,MAAGJ,IAAH,EAAQ,CAEP;;AAEF,sBACI;AAAA,4BACA;AAAO,MAAA,IAAI,EAAC,MAAZ;AAAmB,MAAA,QAAQ,EAAGK,CAAD,IAAKH,aAAa,CAAC;AAACC,QAAAA,MAAM,EAACE,CAAC,CAACC,MAAF,CAASC;AAAjB,OAAD;AAA/C;AAAA;AAAA;AAAA;AAAA,YADA,eAEA;AAAO,MAAA,IAAI,EAAC,QAAZ;AAAqB,MAAA,OAAO,EAAE,MAAIT,SAAS,CAAC;AAAEU,QAAAA,SAAS,EAAE;AAAEC,UAAAA,IAAI,EAAER,UAAU,CAACE;AAAnB;AAAb,OAAD;AAA3C;AAAA;AAAA;AAAA;AAAA,YAFA,eAIA;AAAO,MAAA,IAAI,EAAC,QAAZ;AAAqB,MAAA,OAAO,EAAE,MAAKtB,OAAO,CAACC,GAAR,CAAY,EAAZ;AAAnC;AAAA;AAAA;AAAA;AAAA,YAJA,eAKA,QAAC,QAAD;AAAA;AAAA;AAAA;AAAA,YALA;AAAA,kBADJ;AAaE;;IA/BqBe,M;UASexB,Y;;;MATfwB,M","sourcesContent":["import React, { useState, useEffect,useRef, useLayoutEffect } from \"react\";\nimport { gql, useMutation,  useLazyQuery } from \"@apollo/client\";\n\nconst MyCanvas = (props = {}) => {\n  const {\n    width = 100,\n    height = 100,\n    pixelRatio = window.devicePixelRatio\n  } = props;\nconsole.log('')\n  const canvas = useRef(null);\n\n  useLayoutEffect(() => {\n    const context = canvas.current.getContext(\"2d\");\n\n    context.save();\n    context.moveTo(0,0);\n    context.lineTo(200,100);\n\n   context.stroke();\n    context.restore();\n  });\n\n\n  const dw = Math.floor(pixelRatio * width);\n  const dh = Math.floor(pixelRatio * height);\n  const style = { width, height };\n  return (<canvas ref={canvas} width={dw} height={dh} style={style} />);\n};\n\n\nexport default function CRYPTO() {\n  const CRYPTO = gql`\n  query crypto($symb: String) {\n    crypto(symb: $symb) {\n      name\n      value\n    }\n  }\n`;\nconst [getFields, { loading, data }] = useLazyQuery(CRYPTO);\n const [inputsUser, setinputsUser] = useState({\n    symbol: undefined,\n    \n  });\n  if(data){\n\n  }\n\n return (\n     <>\n     <input type=\"text\" onChange={(e)=>setinputsUser({symbol:e.target.value})}></input>\n     <input type=\"submit\" onClick={()=>getFields({ variables: { symb: inputsUser.symbol } })}></input>\n\n     <input type=\"submit\" onClick={()=> console.log(\"\")}></input>\n     <MyCanvas/>\n    \n     \n     \n     \n     \n     </>\n )}\n\n \n  "]},"metadata":{},"sourceType":"module"}