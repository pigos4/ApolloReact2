{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/danielpiga/Desktop/apollo2copia/ApolloReact2/ApolloReact/apolloclient/src/route/Dato/DatoIdToRender.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { gql, useMutation, useLazyQuery } from \"@apollo/client\";\nexport default function Dato(prop) {\n  _s();\n\n  const [functionToRender, setfunctionToRender] = useState(\"\");\n\n  function Funct(prop) {\n    console.log(prop, \"prop\");\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Name:\", prop.data.dato.name]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 11,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Description:\", prop.data.dato.Description]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 12,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Info:\", prop.data.dato.info]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 13,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"father\", prop.data.dato.father]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 14,\n          columnNumber: 15\n        }, this), prop.data.dato.child.map((x, index) => /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"button\",\n            value: x.ID,\n            onClick: () => setfunctionToRender\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 18,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 24,\n            columnNumber: 19\n          }, this)]\n        }, void 0, true))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 10,\n        columnNumber: 13\n      }, this)\n    }, void 0, false);\n  }\n\n  console.log(prop, \"propssssss\");\n  const DATO = gql`\n          query dato($id: String) {\n            dato(id: $id) {\n              name\n              info\n              Description\n              father\n              child {\n                ID\n                Name\n              }\n            }\n          }\n        `;\n  const [getFields, {\n    loading,\n    data\n  }] = useLazyQuery(DATO);\n  useEffect(() => {\n    getFields({\n      variables: {\n        id: prop.id\n      }\n    });\n\n    if (data) {\n      console.log(data);\n      setfunctionToRender( /*#__PURE__*/_jsxDEV(Funct, {\n        data: data\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 33\n      }, this));\n    }\n  }, [data, getFields]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: functionToRender\n  }, void 0, false);\n}\n\n_s(Dato, \"9yGuhiebz2UcO9ja+PsarzNEROA=\", false, function () {\n  return [useLazyQuery];\n});\n\n_c = Dato;\n\nvar _c;\n\n$RefreshReg$(_c, \"Dato\");","map":{"version":3,"sources":["/Users/danielpiga/Desktop/apollo2copia/ApolloReact2/ApolloReact/apolloclient/src/route/Dato/DatoIdToRender.js"],"names":["React","useState","useEffect","gql","useMutation","useLazyQuery","Dato","prop","functionToRender","setfunctionToRender","Funct","console","log","data","dato","name","Description","info","father","child","map","x","index","ID","DATO","getFields","loading","variables","id"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,GAAT,EAAcC,WAAd,EAA2BC,YAA3B,QAA+C,gBAA/C;AACA,eAAe,SAASC,IAAT,CAAcC,IAAd,EAAoB;AAAA;;AAEjC,QAAM,CAACC,gBAAD,EAAmBC,mBAAnB,IAA0CR,QAAQ,CAAC,EAAD,CAAxD;;AACE,WAASS,KAAT,CAAeH,IAAf,EAAqB;AACjBI,IAAAA,OAAO,CAACC,GAAR,CAAYL,IAAZ,EAAkB,MAAlB;AACA,wBACE;AAAA,6BACE;AAAA,gCACE;AAAA,8BAASA,IAAI,CAACM,IAAL,CAAUC,IAAV,CAAeC,IAAxB;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE;AAAA,qCAAgBR,IAAI,CAACM,IAAL,CAAUC,IAAV,CAAeE,WAA/B;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFF,eAGE;AAAA,8BAAST,IAAI,CAACM,IAAL,CAAUC,IAAV,CAAeG,IAAxB;AAAA;AAAA;AAAA;AAAA;AAAA,gBAHF,eAIE;AAAA,+BAAUV,IAAI,CAACM,IAAL,CAAUC,IAAV,CAAeI,MAAzB;AAAA;AAAA;AAAA;AAAA;AAAA,gBAJF,EAMGX,IAAI,CAACM,IAAL,CAAUC,IAAV,CAAeK,KAAf,CAAqBC,GAArB,CAAyB,CAACC,CAAD,EAAIC,KAAJ,kBACxB;AAAA,kCACE;AACE,YAAA,IAAI,EAAC,QADP;AAGE,YAAA,KAAK,EAAED,CAAC,CAACE,EAHX;AAIE,YAAA,OAAO,EAAE,MAAMd;AAJjB,aAEOa,KAFP;AAAA;AAAA;AAAA;AAAA,kBADF,eAOE;AAAA;AAAA;AAAA;AAAA,kBAPF;AAAA,wBADD,CANH;AAAA;AAAA;AAAA;AAAA;AAAA;AADF,qBADF;AAsBD;;AAECX,EAAAA,OAAO,CAACC,GAAR,CAAYL,IAAZ,EAAiB,YAAjB;AACA,QAAMiB,IAAI,GAAGrB,GAAI;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAbQ;AAcA,QAAM,CAACsB,SAAD,EAAY;AAAEC,IAAAA,OAAF;AAAWb,IAAAA;AAAX,GAAZ,IAAiCR,YAAY,CAACmB,IAAD,CAAnD;AACAtB,EAAAA,SAAS,CAAC,MAAM;AACduB,IAAAA,SAAS,CAAC;AAAEE,MAAAA,SAAS,EAAE;AAAEC,QAAAA,EAAE,EAAErB,IAAI,CAACqB;AAAX;AAAb,KAAD,CAAT;;AAEA,QAAIf,IAAJ,EAAU;AACRF,MAAAA,OAAO,CAACC,GAAR,CAAYC,IAAZ;AACAJ,MAAAA,mBAAmB,eAAC,QAAC,KAAD;AAAO,QAAA,IAAI,EAAEI;AAAb;AAAA;AAAA;AAAA;AAAA,cAAD,CAAnB;AACD;AACF,GAPQ,EAON,CAACA,IAAD,EAAOY,SAAP,CAPM,CAAT;AAQA,sBAAO;AAAA,cAAGjB;AAAH,mBAAP;AACD;;GAtDiBF,I;UA4CuBD,Y;;;KA5CvBC,I","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { gql, useMutation, useLazyQuery } from \"@apollo/client\";\nexport default function Dato(prop) {\n\n  const [functionToRender, setfunctionToRender] = useState(\"\");\n    function Funct(prop) {\n        console.log(prop, \"prop\");\n        return (\n          <>\n            <div>\n              <p>Name:{prop.data.dato.name}</p>\n              <p>Description:{prop.data.dato.Description}</p>\n              <p>Info:{prop.data.dato.info}</p>\n              <p>father{prop.data.dato.father}</p>\n    \n              {prop.data.dato.child.map((x, index) => (\n                <>\n                  <input\n                    type=\"button\"\n                    key={index}\n                    value={x.ID}\n                    onClick={() => setfunctionToRender}\n                  ></input>\n                  <br></br>\n                </>\n              ))}\n            </div>\n          </>\n        );\n      }\n   \n        console.log(prop,\"propssssss\")\n        const DATO = gql`\n          query dato($id: String) {\n            dato(id: $id) {\n              name\n              info\n              Description\n              father\n              child {\n                ID\n                Name\n              }\n            }\n          }\n        `;\n        const [getFields, { loading, data }] = useLazyQuery(DATO);\n        useEffect(() => {\n          getFields({ variables: { id: prop.id } });\n         \n          if (data) {\n            console.log(data);\n            setfunctionToRender(<Funct data={data} />);\n          }\n        }, [data, getFields]);\n        return <>{functionToRender}</>;\n      }\n    \n      \n\n\n"]},"metadata":{},"sourceType":"module"}