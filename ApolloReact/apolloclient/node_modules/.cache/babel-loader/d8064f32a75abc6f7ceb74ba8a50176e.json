{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/danielpiga/Desktop/Apollo2 copy/ApolloReact/apolloclient/src/route/Crypto.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { gql, useLazyQuery } from \"@apollo/client\";\nimport '../';\nexport default function CRYPTO() {\n  _s();\n\n  const [result, setresult] = useState({\n    name: \"\",\n    value: []\n  });\n  const [callQuery, setcallQuery] = useState(false);\n\n  function RenderResults() {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Name:  \", result.name, \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 10,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: [\"Value:\", result.value.map((x, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: x\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 10,\n          columnNumber: 83\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 10,\n        columnNumber: 43\n      }, this)]\n    }, void 0, true);\n  }\n\n  const CRYPTO = gql`\n  query crypto($symb: String) {\n    crypto(symb: $symb) {\n      name\n      value\n    }\n  }\n`;\n  const [getFields, {\n    loading,\n    data\n  }] = useLazyQuery(CRYPTO);\n  const [inputsUser, setinputsUser] = useState({\n    symbol: undefined\n  });\n  useEffect(() => {\n    if (data) {\n      console.log(data);\n      setresult({\n        name: data.crypto.name,\n        value: [data.crypto.value]\n      });\n    }\n  }, [data, callQuery]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [\"Insert the simbol of the crypto to see the price in real time.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 68\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      onChange: e => setinputsUser({\n        symbol: e.target.value\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 6\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"submit\",\n      onClick: () => {\n        setcallQuery(true);\n        getFields({\n          variables: {\n            symb: inputsUser.symbol\n          }\n        });\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 6\n    }, this), /*#__PURE__*/_jsxDEV(RenderResults, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 6\n    }, this), loading ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"loading\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 17\n    }, this) : \"\"]\n  }, void 0, true);\n}\n\n_s(CRYPTO, \"S8m0G+dQfs9++BSe2ULIg0tDPQw=\", false, function () {\n  return [useLazyQuery];\n});\n\n_c = CRYPTO;\n\nvar _c;\n\n$RefreshReg$(_c, \"CRYPTO\");","map":{"version":3,"sources":["/Users/danielpiga/Desktop/Apollo2 copy/ApolloReact/apolloclient/src/route/Crypto.js"],"names":["React","useState","useEffect","gql","useLazyQuery","CRYPTO","result","setresult","name","value","callQuery","setcallQuery","RenderResults","map","x","index","getFields","loading","data","inputsUser","setinputsUser","symbol","undefined","console","log","crypto","e","target","variables","symb"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA0C,OAA1C;AACA,SAASC,GAAT,EAAcC,YAAd,QAAkC,gBAAlC;AACA,OAAO,KAAP;AAEA,eAAe,SAASC,MAAT,GAAkB;AAAA;;AACjC,QAAM,CAACC,MAAD,EAAQC,SAAR,IAAmBN,QAAQ,CAAC;AAACO,IAAAA,IAAI,EAAC,EAAN;AAASC,IAAAA,KAAK,EAAC;AAAf,GAAD,CAAjC;AACA,QAAM,CAACC,SAAD,EAAWC,YAAX,IAAyBV,QAAQ,CAAC,KAAD,CAAvC;;AACA,WAASW,aAAT,GAAwB;AAEpB,wBAAQ;AAAA,8BAAE;AAAA,8BAAWN,MAAM,CAACE,IAAlB;AAAA;AAAA;AAAA;AAAA;AAAA,cAAF,eAA8B;AAAA,6BAAWF,MAAM,CAACG,KAAP,CAAaI,GAAb,CAAiB,CAACC,CAAD,EAAGC,KAAH,kBAAY;AAAA,oBAAiBD;AAAjB,WAASC,KAAT;AAAA;AAAA;AAAA;AAAA,gBAA7B,CAAX;AAAA;AAAA;AAAA;AAAA;AAAA,cAA9B;AAAA,oBAAR;AACH;;AAGC,QAAMV,MAAM,GAAGF,GAAI;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,CAPE;AAQF,QAAM,CAACa,SAAD,EAAY;AAAEC,IAAAA,OAAF;AAAWC,IAAAA;AAAX,GAAZ,IAAiCd,YAAY,CAACC,MAAD,CAAnD;AACC,QAAM,CAACc,UAAD,EAAaC,aAAb,IAA8BnB,QAAQ,CAAC;AAC1CoB,IAAAA,MAAM,EAAEC;AADkC,GAAD,CAA5C;AAICpB,EAAAA,SAAS,CAAC,MAAM;AACd,QAAGgB,IAAH,EAAQ;AACJK,MAAAA,OAAO,CAACC,GAAR,CAAYN,IAAZ;AACAX,MAAAA,SAAS,CAAC;AAACC,QAAAA,IAAI,EAACU,IAAI,CAACO,MAAL,CAAYjB,IAAlB;AAAuBC,QAAAA,KAAK,EAAC,CAACS,IAAI,CAACO,MAAL,CAAYhB,KAAb;AAA7B,OAAD,CAAT;AACD;AAEJ,GANQ,EAMP,CAACS,IAAD,EAAMR,SAAN,CANO,CAAT;AASD,sBACI;AAAA,8FAC8D;AAAA;AAAA;AAAA;AAAA,YAD9D,eAEA;AAAO,MAAA,IAAI,EAAC,MAAZ;AAAmB,MAAA,QAAQ,EAAGgB,CAAD,IAAKN,aAAa,CAAC;AAACC,QAAAA,MAAM,EAACK,CAAC,CAACC,MAAF,CAASlB;AAAjB,OAAD;AAA/C;AAAA;AAAA;AAAA;AAAA,YAFA,eAGA;AAAO,MAAA,IAAI,EAAC,QAAZ;AAAqB,MAAA,OAAO,EAAE,MAAI;AAACE,QAAAA,YAAY,CAAC,IAAD,CAAZ;AAAmBK,QAAAA,SAAS,CAAC;AAAEY,UAAAA,SAAS,EAAE;AAAEC,YAAAA,IAAI,EAAEV,UAAU,CAACE;AAAnB;AAAb,SAAD,CAAT;AAAsD;AAA5G;AAAA;AAAA;AAAA;AAAA,YAHA,eAIA,QAAC,aAAD;AAAA;AAAA;AAAA;AAAA,YAJA,EAKEJ,OAAD,gBAAU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAV,GAAyB,EAL1B;AAAA,kBADJ;AAQE;;GAvCqBZ,M;UAiBeD,Y;;;KAjBfC,M","sourcesContent":["import React, { useState, useEffect} from \"react\";\nimport { gql, useLazyQuery } from \"@apollo/client\";\nimport '../'\n\nexport default function CRYPTO() {\nconst [result,setresult]=useState({name:\"\",value:[]})\nconst [callQuery,setcallQuery]=useState(false)\nfunction RenderResults(){\n    \n    return (<><p>Name:  {result.name} </p><ul>Value:{result.value.map((x,index)=>(<li key={index}>{x}</li>))}</ul></>)\n}\n\n\n  const CRYPTO = gql`\n  query crypto($symb: String) {\n    crypto(symb: $symb) {\n      name\n      value\n    }\n  }\n`;\nconst [getFields, { loading, data }] = useLazyQuery(CRYPTO);\n const [inputsUser, setinputsUser] = useState({\n    symbol: undefined,\n    \n  });\n  useEffect(() => {\n    if(data){\n        console.log(data)\n        setresult({name:data.crypto.name,value:[data.crypto.value]})\n      }  \n\n  },[data,callQuery])\n  \n\n return (\n     <>\n     Insert the simbol of the crypto to see the price in real time.<br/>\n     <input type=\"text\" onChange={(e)=>setinputsUser({symbol:e.target.value})}></input>\n     <input type=\"submit\" onClick={()=>{setcallQuery(true);getFields({ variables: { symb: inputsUser.symbol } })}}></input>\n     <RenderResults/>\n     {(loading)?<p>loading</p>:\"\"}\n     </>\n )}\n\n\n\n \n  "]},"metadata":{},"sourceType":"module"}