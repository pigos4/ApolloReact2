{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/danielpiga/Desktop/Apollo2 copy/ApolloReact/apolloclient/src/graphql/mutation/Signup.js\",\n    _s = $RefreshSig$();\n\nimport { React, useState } from \"react\";\nimport { gql, useMutation } from \"@apollo/client\";\nconst ADD_USER = gql`\n  mutation($name: String!, $username: String!, $password: String!) {\n    addUser(name: $name, username: $username, password: $password) {\n      response\n    }\n  }\n`;\nexport default function Mut() {\n  _s();\n\n  const [addUser, {\n    data,\n    loading\n  }] = useMutation(ADD_USER);\n  const [user, setUser] = useState({\n    name: \"\",\n    username: \"\",\n    password: \"\"\n  });\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      onChange: e => setUser({\n        name: e.target.value,\n        username: user.username,\n        password: user.password\n      }),\n      placeholder: \"Name\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      onChange: e => {\n        setUser({\n          name: user.name,\n          username: e.target.value,\n          password: user.password\n        });\n      },\n      placeholder: \"Username\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"password\",\n      onChange: e => {\n        setUser({\n          name: user.name,\n          username: user.username,\n          password: e.target.value\n        });\n      },\n      placeholder: \"password\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"button\",\n      value: \"submit\",\n      onClick: () => {\n        addUser({\n          variables: user\n        });\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this), user.name, user.username, user.password, loading ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"loading\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 18\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"done\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 35\n    }, this), data ? `${data.addUser.response}\"` : \"\"]\n  }, void 0, true);\n}\n\n_s(Mut, \"oP1oJqIy4Fanb5dc/+WJIeYZjVc=\", false, function () {\n  return [useMutation];\n});\n\n_c = Mut;\n\nvar _c;\n\n$RefreshReg$(_c, \"Mut\");","map":{"version":3,"sources":["/Users/danielpiga/Desktop/Apollo2 copy/ApolloReact/apolloclient/src/graphql/mutation/Signup.js"],"names":["React","useState","gql","useMutation","ADD_USER","Mut","addUser","data","loading","user","setUser","name","username","password","e","target","value","variables","response"],"mappings":";;;;;;AAAA,SAASA,KAAT,EAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,GAAT,EAAcC,WAAd,QAAiC,gBAAjC;AAEA,MAAMC,QAAQ,GAAGF,GAAI;AACrB;AACA;AACA;AACA;AACA;AACA,CANA;AAQA,eAAe,SAASG,GAAT,GAAe;AAAA;;AAC5B,QAAM,CAACC,OAAD,EAAU;AAAEC,IAAAA,IAAF;AAAQC,IAAAA;AAAR,GAAV,IAA+BL,WAAW,CAACC,QAAD,CAAhD;AACA,QAAM,CAACK,IAAD,EAAOC,OAAP,IAAkBT,QAAQ,CAAC;AAAEU,IAAAA,IAAI,EAAE,EAAR;AAAYC,IAAAA,QAAQ,EAAE,EAAtB;AAA0BC,IAAAA,QAAQ,EAAE;AAApC,GAAD,CAAhC;AACA,sBACE;AAAA,4BACE;AACE,MAAA,IAAI,EAAC,MADP;AAEE,MAAA,QAAQ,EAAGC,CAAD,IACRJ,OAAO,CAAC;AACNC,QAAAA,IAAI,EAAEG,CAAC,CAACC,MAAF,CAASC,KADT;AAENJ,QAAAA,QAAQ,EAAEH,IAAI,CAACG,QAFT;AAGNC,QAAAA,QAAQ,EAAEJ,IAAI,CAACI;AAHT,OAAD,CAHX;AASE,MAAA,WAAW,EAAC;AATd;AAAA;AAAA;AAAA;AAAA,YADF,eAYE;AACE,MAAA,IAAI,EAAC,MADP;AAEE,MAAA,QAAQ,EAAGC,CAAD,IAAO;AACfJ,QAAAA,OAAO,CAAC;AACNC,UAAAA,IAAI,EAAEF,IAAI,CAACE,IADL;AAENC,UAAAA,QAAQ,EAAEE,CAAC,CAACC,MAAF,CAASC,KAFb;AAGNH,UAAAA,QAAQ,EAAEJ,IAAI,CAACI;AAHT,SAAD,CAAP;AAKD,OARH;AASE,MAAA,WAAW,EAAC;AATd;AAAA;AAAA;AAAA;AAAA,YAZF,eAuBE;AACE,MAAA,IAAI,EAAC,UADP;AAEE,MAAA,QAAQ,EAAGC,CAAD,IAAO;AACfJ,QAAAA,OAAO,CAAC;AACNC,UAAAA,IAAI,EAAEF,IAAI,CAACE,IADL;AAENC,UAAAA,QAAQ,EAAEH,IAAI,CAACG,QAFT;AAGNC,UAAAA,QAAQ,EAAEC,CAAC,CAACC,MAAF,CAASC;AAHb,SAAD,CAAP;AAKD,OARH;AASE,MAAA,WAAW,EAAC;AATd;AAAA;AAAA;AAAA;AAAA,YAvBF,eAkCE;AACE,MAAA,IAAI,EAAC,QADP;AAEE,MAAA,KAAK,EAAC,QAFR;AAGE,MAAA,OAAO,EAAE,MAAM;AACbV,QAAAA,OAAO,CAAC;AAAEW,UAAAA,SAAS,EAAER;AAAb,SAAD,CAAP;AACD;AALH;AAAA;AAAA;AAAA;AAAA,YAlCF,EAyCGA,IAAI,CAACE,IAzCR,EA0CGF,IAAI,CAACG,QA1CR,EA2CGH,IAAI,CAACI,QA3CR,EA4CGL,OAAO,gBAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAH,gBAAoB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YA5C9B,EA6CGD,IAAI,GAAI,GAAEA,IAAI,CAACD,OAAL,CAAaY,QAAS,GAA5B,GAAiC,EA7CxC;AAAA,kBADF;AAiDD;;GApDuBb,G;UACeF,W;;;KADfE,G","sourcesContent":["import { React, useState } from \"react\";\nimport { gql, useMutation } from \"@apollo/client\";\n\nconst ADD_USER = gql`\n  mutation($name: String!, $username: String!, $password: String!) {\n    addUser(name: $name, username: $username, password: $password) {\n      response\n    }\n  }\n`;\n\nexport default function Mut() {\n  const [addUser, { data, loading }] = useMutation(ADD_USER);\n  const [user, setUser] = useState({ name: \"\", username: \"\", password: \"\" });\n  return (\n    <>\n      <input\n        type=\"text\"\n        onChange={(e) =>\n          setUser({\n            name: e.target.value,\n            username: user.username,\n            password: user.password,\n          })\n        }\n        placeholder=\"Name\"\n      ></input>\n      <input\n        type=\"text\"\n        onChange={(e) => {\n          setUser({\n            name: user.name,\n            username: e.target.value,\n            password: user.password,\n          });\n        }}\n        placeholder=\"Username\"\n      ></input>\n      <input\n        type=\"password\"\n        onChange={(e) => {\n          setUser({\n            name: user.name,\n            username: user.username,\n            password: e.target.value,\n          });\n        }}\n        placeholder=\"password\"\n      ></input>\n      <input\n        type=\"button\"\n        value=\"submit\"\n        onClick={() => {\n          addUser({ variables: user });\n        }}\n      ></input>\n      {user.name}\n      {user.username}\n      {user.password}\n      {loading ? <p>loading</p> : <p>done</p>}\n      {data ? `${data.addUser.response}\"` : \"\"}\n    </>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}