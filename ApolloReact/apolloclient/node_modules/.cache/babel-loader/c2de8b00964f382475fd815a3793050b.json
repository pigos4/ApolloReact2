{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/danielpiga/Desktop/apollo2copia/ApolloReact2/ApolloReact/apolloclient/src/route/Dato.js\",\n    _s2 = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { gql, useMutation, useLazyQuery } from \"@apollo/client\";\nexport default function Dato() {\n  _s2();\n\n  var _s = $RefreshSig$();\n\n  const [idToRender, setidTorender] = useState(\"36\");\n  const [functionToRender, setfunctionToRender] = useState(\"\");\n\n  function Funct(prop) {\n    console.log(prop, \"prop\");\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Name:\", prop.data.dato.name]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 13,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Description:\", prop.data.dato.Description]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 14,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Info:\", prop.data.dato.info]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 15,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"father\", prop.data.dato.father]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 16,\n          columnNumber: 11\n        }, this), prop.data.dato.child.map((x, index) => /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"button\",\n            value: x.Name,\n            onClick: () => setidTorender(x.ID)\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 20,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 26,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 12,\n        columnNumber: 9\n      }, this)\n    }, void 0, false);\n  }\n\n  function IdToRender() {\n    _s();\n\n    const DATO = gql`\n      query dato($id: String) {\n        dato(id: $id) {\n          name\n          info\n          Description\n          father\n          child {\n            ID\n            Name\n          }\n        }\n      }\n    `;\n    const [getFields, {\n      loading,\n      data\n    }] = useLazyQuery(DATO);\n    useEffect(() => {\n      let x = idToRender => getFields({\n        variables: {\n          id: idToRender\n        }\n      });\n\n      if (data) {\n        console.log(data);\n        setfunctionToRender( /*#__PURE__*/_jsxDEV(Funct, {\n          data: data\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 29\n        }, this));\n      }\n    }, [data, getFields]);\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: functionToRender\n    }, void 0, false);\n  }\n\n  _s(IdToRender, \"Vq6BOzVrwLDs6r8lPcf/5bqzH0M=\", false, function () {\n    return [useLazyQuery];\n  });\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(IdToRender, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n} //   const [idToRender, setidTorender] = useState(\"36\");\n//   const [functionToRender, setfunctionToRender] = useState(\"\");\n//   function RenderChild(props) {\n//     console.log(props.child, \"propsrender child\");\n//     useEffect(() => {\n//       return props.child.map((x, index) => (\n//         <>\n//           <input type=\"button\" key={index} value={x.Name} onClick={()=>setidTorender(x.ID)}></input>\n//           <br></br>\n//         </>\n//       ));\n//     }, [props.child])\n//   }\n//   function Funct(prop) {\n//     console.log(prop, \"prop\");\n//     const MemoRenderChild = useMemo(()=> RenderChild(prop.data.dato.child),[prop]);\n//     return (\n//       <>\n//         <div>\n//           <p>Name:{prop.data.dato.name}</p>\n//           <p>Description:{prop.data.dato.Description}</p>\n//           <p>Info:{prop.data.dato.info}</p>\n//           <p>father{prop.data.dato.father}</p>\n//         </div>\n//         <MemoRenderChild />\n//       </>\n//     );\n//   }\n//   function FunctionIdToRender() {\n//     const DATO = gql`\n//       query dato($id: String) {\n//         dato(id: $id) {\n//           name\n//           info\n//           Description\n//           father\n//           child {\n//             ID\n//             Name\n//           }\n//         }\n//       }\n//     `;\n//     const [getFields, { loading, data }] = useLazyQuery(DATO);\n//     useEffect(() => {\n//       getFields({ variables: { id: idToRender } })\n//       if (data) {\n//         console.log(data);\n//         setfunctionToRender(<Funct data={data} />);\n//       }\n//     }, [data,getFields]);\n//     return (\n//       <input\n//         type=\"button\"\n//         onClick={() => getFields({ variables: { id: idToRender } })}\n//         value=\"Javascript\"\n//       ></input>\n//     );\n//   }\n//   return (\n//     <>\n//       <div>\n//         {functionToRender}\n//         <FunctionIdToRender />\n//       </div>\n//     </>\n//   );\n// }\n\n_s2(Dato, \"moiRcPSzfhnjM6AUYbfFIhDRMp8=\");\n\n_c = Dato;\n\nvar _c;\n\n$RefreshReg$(_c, \"Dato\");","map":{"version":3,"sources":["/Users/danielpiga/Desktop/apollo2copia/ApolloReact2/ApolloReact/apolloclient/src/route/Dato.js"],"names":["React","useState","useEffect","gql","useMutation","useLazyQuery","Dato","idToRender","setidTorender","functionToRender","setfunctionToRender","Funct","prop","console","log","data","dato","name","Description","info","father","child","map","x","index","Name","ID","IdToRender","DATO","getFields","loading","variables","id"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { gql, useMutation, useLazyQuery } from \"@apollo/client\";\n\nexport default function Dato() {\n  const [idToRender, setidTorender] = useState(\"36\");\n\n  const [functionToRender, setfunctionToRender] = useState(\"\");\n  function Funct(prop) {\n    console.log(prop, \"prop\");\n    return (\n      <>\n        <div>\n          <p>Name:{prop.data.dato.name}</p>\n          <p>Description:{prop.data.dato.Description}</p>\n          <p>Info:{prop.data.dato.info}</p>\n          <p>father{prop.data.dato.father}</p>\n\n          {prop.data.dato.child.map((x, index) => (\n            <>\n              <input\n                type=\"button\"\n                key={index}\n                value={x.Name}\n                onClick={() => setidTorender(x.ID)}\n              ></input>\n              <br></br>\n            </>\n          ))}\n        </div>\n      </>\n    );\n  }\n\n  function IdToRender() {\n    const DATO = gql`\n      query dato($id: String) {\n        dato(id: $id) {\n          name\n          info\n          Description\n          father\n          child {\n            ID\n            Name\n          }\n        }\n      }\n    `;\n    const [getFields, { loading, data }] = useLazyQuery(DATO);\n    useEffect(() => {\n      let x=(idToRender)=>getFields({ variables: { id: idToRender } });\n      if (data) {\n        console.log(data);\n        setfunctionToRender(<Funct data={data} />);\n      }\n    }, [data, getFields]);\n    return <>{functionToRender}</>;\n  }\n\n  return (\n    <>\n      <IdToRender />\n    </>\n  );\n}\n\n//   const [idToRender, setidTorender] = useState(\"36\");\n//   const [functionToRender, setfunctionToRender] = useState(\"\");\n\n//   function RenderChild(props) {\n//     console.log(props.child, \"propsrender child\");\n//     useEffect(() => {\n//       return props.child.map((x, index) => (\n//         <>\n//           <input type=\"button\" key={index} value={x.Name} onClick={()=>setidTorender(x.ID)}></input>\n//           <br></br>\n//         </>\n//       ));\n//     }, [props.child])\n\n//   }\n\n//   function Funct(prop) {\n//     console.log(prop, \"prop\");\n//     const MemoRenderChild = useMemo(()=> RenderChild(prop.data.dato.child),[prop]);\n//     return (\n//       <>\n//         <div>\n//           <p>Name:{prop.data.dato.name}</p>\n//           <p>Description:{prop.data.dato.Description}</p>\n//           <p>Info:{prop.data.dato.info}</p>\n//           <p>father{prop.data.dato.father}</p>\n//         </div>\n//         <MemoRenderChild />\n//       </>\n//     );\n//   }\n//   function FunctionIdToRender() {\n//     const DATO = gql`\n//       query dato($id: String) {\n//         dato(id: $id) {\n//           name\n//           info\n//           Description\n//           father\n//           child {\n//             ID\n//             Name\n//           }\n//         }\n//       }\n//     `;\n\n//     const [getFields, { loading, data }] = useLazyQuery(DATO);\n//     useEffect(() => {\n//       getFields({ variables: { id: idToRender } })\n//       if (data) {\n//         console.log(data);\n//         setfunctionToRender(<Funct data={data} />);\n//       }\n//     }, [data,getFields]);\n//     return (\n//       <input\n//         type=\"button\"\n//         onClick={() => getFields({ variables: { id: idToRender } })}\n//         value=\"Javascript\"\n//       ></input>\n//     );\n//   }\n//   return (\n//     <>\n//       <div>\n//         {functionToRender}\n//         <FunctionIdToRender />\n//       </div>\n//     </>\n//   );\n// }\n"]},"metadata":{},"sourceType":"module"}