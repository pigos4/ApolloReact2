{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/danielpiga/Desktop/apolloreact/apolloclient/src/graphql.js\",\n    _s = $RefreshSig$();\n\nimport { ApolloClient, InMemoryCache, gql, HttpLink, useQuery } from '@apollo/client';\nexport const client = new ApolloClient({\n  link: new HttpLink({\n    uri: 'http://localhost:4000/'\n  }),\n  cache: new InMemoryCache()\n});\nconst USERS = gql`\n\nquery user {ciao{nome\nid\ncognome}}\n  `;\nexport default function Valentina() {\n  _s();\n\n  const {\n    loading,\n    error,\n    data\n  } = useQuery(USERS);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"ciao\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 19,\n    columnNumber: 11\n  }, this); // if (loading) return <p>Loading...</p>;\n  // if (error) return <p>Error :(</p>;\n  // return data.rates.map(({ id, nome,cognome }) => (\n  //   <div key={id}>\n  //     <p>\n  //       {nome}: {cognome}\n  //     </p>\n  //   </div>\n  // ));\n} // const UsersList = ()=>{\n// const {loading, data} = useQuery(USERS)\n// if(loading)return <p>Loading users</p>;\n// console.log(data)\n// // return data.user.map((ciao)=>(\n// // <Valentina key={ciao.id} user={{...ciao}}></Valentina>\n// //)\n// //)\n// }\n// export default function Valentina ({user}){\n//   //const{id,nome,cognome}=user;\n// return(<>\n// <UsersList/><div >nome:cognome: </div></>)}\n\n_s(Valentina, \"OQZiY3KqWoytFPIJWw/H9Hrmbok=\", false, function () {\n  return [useQuery];\n});\n\n_c = Valentina;\n\nvar _c;\n\n$RefreshReg$(_c, \"Valentina\");","map":{"version":3,"sources":["/Users/danielpiga/Desktop/apolloreact/apolloclient/src/graphql.js"],"names":["ApolloClient","InMemoryCache","gql","HttpLink","useQuery","client","link","uri","cache","USERS","Valentina","loading","error","data"],"mappings":";;;;;AAAA,SAASA,YAAT,EAAuBC,aAAvB,EAAsCC,GAAtC,EAA2CC,QAA3C,EAAqDC,QAArD,QAAqE,gBAArE;AAEA,OAAO,MAAMC,MAAM,GAAG,IAAIL,YAAJ,CAAiB;AACrCM,EAAAA,IAAI,EAAE,IAAIH,QAAJ,CAAa;AAACI,IAAAA,GAAG,EAAE;AAAN,GAAb,CAD+B;AAErCC,EAAAA,KAAK,EAAE,IAAIP,aAAJ;AAF8B,CAAjB,CAAf;AAMP,MAAMQ,KAAK,GAACP,GAAI;AAChB;AACA;AACA;AACA;AACA,GALA;AAOA,eAAe,SAASQ,SAAT,GAAqB;AAAA;;AAEjC,QAAM;AAAEC,IAAAA,OAAF;AAAWC,IAAAA,KAAX;AAAkBC,IAAAA;AAAlB,MAA2BT,QAAQ,CAACK,KAAD,CAAzC;AACD,sBAAQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAR,CAHkC,CAIlC;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACD,C,CAGD;AACA;AAEA;AACA;AACA;AACA;AAGA;AACA;AAEA;AAMA;AAEA;AAKA;AACA;;GA3CwBC,S;UAEYN,Q;;;KAFZM,S","sourcesContent":["import { ApolloClient, InMemoryCache, gql, HttpLink, useQuery } from '@apollo/client';\n\nexport const client = new ApolloClient({\n  link: new HttpLink({uri: 'http://localhost:4000/'}),\n  cache: new InMemoryCache()\n});\n\n\nconst USERS=gql`\n\nquery user {ciao{nome\nid\ncognome}}\n  `;\n\nexport default function Valentina() {\n \n   const { loading, error, data } = useQuery(USERS);\n  return (<div>ciao</div>)\n  // if (loading) return <p>Loading...</p>;\n  // if (error) return <p>Error :(</p>;\n\n  // return data.rates.map(({ id, nome,cognome }) => (\n  //   <div key={id}>\n  //     <p>\n  //       {nome}: {cognome}\n  //     </p>\n  //   </div>\n  // ));\n}\n\n\n// const UsersList = ()=>{\n// const {loading, data} = useQuery(USERS)\n\n// if(loading)return <p>Loading users</p>;\n// console.log(data)\n// // return data.user.map((ciao)=>(\n// // <Valentina key={ciao.id} user={{...ciao}}></Valentina>\n\n\n// //)\n// //)\n\n// }\n\n\n\n\n\n// export default function Valentina ({user}){\n  \n//   //const{id,nome,cognome}=user;\n   \n\n\n\n// return(<>\n// <UsersList/><div >nome:cognome: </div></>)}"]},"metadata":{},"sourceType":"module"}