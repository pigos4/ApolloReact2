{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/danielpiga/Desktop/Apollo2 copy/ApolloReact/apolloclient/src/route/Crypto.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, Component } from \"react\";\nimport { gql, useMutation, useLazyQuery } from \"@apollo/client\";\nimport { Line } from 'react-chartjs-2';\nexport default function CRYPTO() {\n  _s();\n\n  const [period, setperiod] = useState([1, 2, 3, 4, 5, 6, 7, 9]);\n  const dat = {\n    labels: period,\n    datasets: [{\n      label: 'My First dataset',\n      fill: false,\n      lineTension: 0.1,\n      backgroundColor: 'rgba(75,192,192,0.4)',\n      borderColor: 'rgba(75,192,192,1)',\n      borderCapStyle: 'butt',\n      borderDash: [],\n      borderDashOffset: 0.0,\n      borderJoinStyle: 'miter',\n      pointBorderColor: 'rgba(75,192,192,1)',\n      pointBackgroundColor: '#fff',\n      pointBorderWidth: 1,\n      pointHoverRadius: 5,\n      pointHoverBackgroundColor: 'rgba(75,192,192,1)',\n      pointHoverBorderColor: 'rgba(220,220,220,1)',\n      pointHoverBorderWidth: 2,\n      pointRadius: 1,\n      pointHitRadius: 10,\n      data: [0.65, 0.59, 0.80, 0.81, 0.56, 0.55, 40, 0.5]\n    }]\n  };\n\n  class LineDemo extends Component {\n    render() {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Line Example\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Line, {\n          ref: \"chart\",\n          data: dat\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 9\n      }, this);\n    }\n\n    componentDidMount() {\n      const {\n        datasets\n      } = this.refs.chart.chartInstance.data;\n      console.log(datasets[0].data);\n    }\n\n  }\n\n  const CRYPTO = gql`\n  query crypto($symb: String) {\n    crypto(symb: $symb) {\n      name\n      value\n    }\n  }\n`;\n  const [getFields, {\n    loading,\n    data\n  }] = useLazyQuery(CRYPTO);\n  const [inputsUser, setinputsUser] = useState({\n    symbol: undefined\n  });\n\n  if (data) {\n    console.log(data);\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      onChange: e => setinputsUser({\n        symbol: e.target.value\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 6\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"submit\",\n      onClick: () => getFields({\n        variables: {\n          symb: inputsUser.symbol\n        }\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 6\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"submit\",\n      onClick: () => console.log(dat.labels[0])\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 6\n    }, this), /*#__PURE__*/_jsxDEV(LineDemo, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 6\n    }, this)]\n  }, void 0, true);\n}\n\n_s(CRYPTO, \"xiaZsGD1te8zlaqiI9pZXkD9noE=\", false, function () {\n  return [useLazyQuery];\n});\n\n_c = CRYPTO;\n\nvar _c;\n\n$RefreshReg$(_c, \"CRYPTO\");","map":{"version":3,"sources":["/Users/danielpiga/Desktop/Apollo2 copy/ApolloReact/apolloclient/src/route/Crypto.js"],"names":["React","useState","useEffect","Component","gql","useMutation","useLazyQuery","Line","CRYPTO","period","setperiod","dat","labels","datasets","label","fill","lineTension","backgroundColor","borderColor","borderCapStyle","borderDash","borderDashOffset","borderJoinStyle","pointBorderColor","pointBackgroundColor","pointBorderWidth","pointHoverRadius","pointHoverBackgroundColor","pointHoverBorderColor","pointHoverBorderWidth","pointRadius","pointHitRadius","data","LineDemo","render","componentDidMount","refs","chart","chartInstance","console","log","getFields","loading","inputsUser","setinputsUser","symbol","undefined","e","target","value","variables","symb"],"mappings":"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","sourcesContent":["import React, { useState, useEffect,Component } from \"react\";\nimport { gql, useMutation,  useLazyQuery } from \"@apollo/client\";\nimport { Line } from 'react-chartjs-2';\n\nexport default function CRYPTO() {\n    const [period,setperiod]=useState([1,2,3,4,5,6,7,9])\nconst dat = {\n    labels: period,\n    datasets: [\n      {\n        label: 'My First dataset',\n        fill: false,\n        lineTension: 0.1,\n        backgroundColor: 'rgba(75,192,192,0.4)',\n        borderColor: 'rgba(75,192,192,1)',\n        borderCapStyle: 'butt',\n        borderDash: [],\n        borderDashOffset: 0.0,\n        borderJoinStyle: 'miter',\n        pointBorderColor: 'rgba(75,192,192,1)',\n        pointBackgroundColor: '#fff',\n        pointBorderWidth: 1,\n        pointHoverRadius: 5,\n        pointHoverBackgroundColor: 'rgba(75,192,192,1)',\n        pointHoverBorderColor: 'rgba(220,220,220,1)',\n        pointHoverBorderWidth: 2,\n        pointRadius: 1,\n        pointHitRadius: 10,\n        data: [0.65, 0.59, 0.80, 0.81, 0.56, 0.55, 40,0.5]\n      }\n    ]\n  };\nclass LineDemo extends Component {\n    render() {\n      return (\n        <div>\n          <h2>Line Example</h2>\n          <Line ref=\"chart\" data={dat} />\n        </div>\n      );\n    }\n    componentDidMount() {\n      const { datasets } = this.refs.chart.chartInstance.data\n      console.log(datasets[0].data);\n    }\n  }\n  const CRYPTO = gql`\n  query crypto($symb: String) {\n    crypto(symb: $symb) {\n      name\n      value\n    }\n  }\n`;\nconst [getFields, { loading, data }] = useLazyQuery(CRYPTO);\n const [inputsUser, setinputsUser] = useState({\n    symbol: undefined,\n    \n  });\n  if(data){\nconsole.log(data)\n  }\n\n return (\n     <>\n     <input type=\"text\" onChange={(e)=>setinputsUser({symbol:e.target.value})}></input>\n     <input type=\"submit\" onClick={()=>getFields({ variables: { symb: inputsUser.symbol } })}></input>\n\n     <input type=\"submit\" onClick={()=> console.log(dat.labels[0])}></input>\n     <LineDemo/>\n     </>\n )}\n\n\n\n\n\n\n \n  "]},"metadata":{},"sourceType":"module"}