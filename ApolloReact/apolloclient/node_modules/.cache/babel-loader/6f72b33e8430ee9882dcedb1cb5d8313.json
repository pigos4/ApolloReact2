{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/danielpiga/Desktop/Apollo2 copy/ApolloReact/apolloclient/src/route/Crypto.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { gql, useMutation, useLazyQuery } from \"@apollo/client\";\nimport CanvasJSReact from '../../assets/canvasjs.react';\nvar CanvasJSChart = CanvasJSReact.CanvasJSChart;\nexport default function CRYPTO() {\n  _s();\n\n  const CRYPTO = gql`\n  query crypto($symb: String) {\n    crypto(symb: $symb) {\n      name\n      value\n    }\n  }\n`;\n  const [getFields, {\n    loading,\n    data\n  }] = useLazyQuery(CRYPTO);\n  const [inputsUser, setinputsUser] = useState({\n    symbol: undefined\n  });\n\n  if (data) {} //   const [renderDataLoading, setrenderDataLoading] = useState(null);\n  //   if(renderDataLoading===null)getFields({ variables: { id: inputsUser.id } })\n\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      onChange: e => setinputsUser({\n        symbol: e.target.value\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 6\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"submit\",\n      onClick: () => getFields({\n        variables: {\n          symb: inputsUser.symbol\n        }\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 6\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"submit\",\n      onClick: () => console.log(data)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 6\n    }, this)]\n  }, void 0, true);\n}\n\n_s(CRYPTO, \"7T3elbT2H3OUrUcySWoHgg7Zjpc=\", false, function () {\n  return [useLazyQuery];\n});\n\n_c = CRYPTO;\n\nvar _c;\n\n$RefreshReg$(_c, \"CRYPTO\");","map":{"version":3,"sources":["/Users/danielpiga/Desktop/Apollo2 copy/ApolloReact/apolloclient/src/route/Crypto.js"],"names":["React","useState","useEffect","gql","useMutation","useLazyQuery","CanvasJSReact","CanvasJSChart","CRYPTO","getFields","loading","data","inputsUser","setinputsUser","symbol","undefined","e","target","value","variables","symb","console","log"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,GAAT,EAAcC,WAAd,EAA4BC,YAA5B,QAAgD,gBAAhD;AACA,OAAOC,aAAP,MAA0B,6BAA1B;AACA,IAAIC,aAAa,GAAGD,aAAa,CAACC,aAAlC;AAGA,eAAe,SAASC,MAAT,GAAkB;AAAA;;AAC/B,QAAMA,MAAM,GAAGL,GAAI;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,CAPE;AAQF,QAAM,CAACM,SAAD,EAAY;AAAEC,IAAAA,OAAF;AAAWC,IAAAA;AAAX,GAAZ,IAAiCN,YAAY,CAACG,MAAD,CAAnD;AACC,QAAM,CAACI,UAAD,EAAaC,aAAb,IAA8BZ,QAAQ,CAAC;AAC1Ca,IAAAA,MAAM,EAAEC;AADkC,GAAD,CAA5C;;AAIC,MAAGJ,IAAH,EAAQ,CAEP,CAhB8B,CAkBjC;AACA;;;AAEC,sBACI;AAAA,4BACA;AAAO,MAAA,IAAI,EAAC,MAAZ;AAAmB,MAAA,QAAQ,EAAGK,CAAD,IAAKH,aAAa,CAAC;AAACC,QAAAA,MAAM,EAACE,CAAC,CAACC,MAAF,CAASC;AAAjB,OAAD;AAA/C;AAAA;AAAA;AAAA;AAAA,YADA,eAEA;AAAO,MAAA,IAAI,EAAC,QAAZ;AAAqB,MAAA,OAAO,EAAE,MAAIT,SAAS,CAAC;AAAEU,QAAAA,SAAS,EAAE;AAAEC,UAAAA,IAAI,EAAER,UAAU,CAACE;AAAnB;AAAb,OAAD;AAA3C;AAAA;AAAA;AAAA;AAAA,YAFA,eAIA;AAAO,MAAA,IAAI,EAAC,QAAZ;AAAqB,MAAA,OAAO,EAAE,MAAIO,OAAO,CAACC,GAAR,CAAYX,IAAZ;AAAlC;AAAA;AAAA;AAAA;AAAA,YAJA;AAAA,kBADJ;AAaE;;GAlCqBH,M;UASeH,Y;;;KATfG,M","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { gql, useMutation,  useLazyQuery } from \"@apollo/client\";\nimport CanvasJSReact from '../../assets/canvasjs.react';\nvar CanvasJSChart = CanvasJSReact.CanvasJSChart;\n\n\nexport default function CRYPTO() {\n  const CRYPTO = gql`\n  query crypto($symb: String) {\n    crypto(symb: $symb) {\n      name\n      value\n    }\n  }\n`;\nconst [getFields, { loading, data }] = useLazyQuery(CRYPTO);\n const [inputsUser, setinputsUser] = useState({\n    symbol: undefined,\n    \n  });\n  if(data){\n\n  }\n\n//   const [renderDataLoading, setrenderDataLoading] = useState(null);\n//   if(renderDataLoading===null)getFields({ variables: { id: inputsUser.id } })\n\n return (\n     <>\n     <input type=\"text\" onChange={(e)=>setinputsUser({symbol:e.target.value})}></input>\n     <input type=\"submit\" onClick={()=>getFields({ variables: { symb: inputsUser.symbol } })}></input>\n\n     <input type=\"submit\" onClick={()=>console.log(data) }></input>\n     \n     \n     \n     \n     \n     \n     </>\n )}\n\n \n  "]},"metadata":{},"sourceType":"module"}