{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/danielpiga/Desktop/Apollo2 copy/ApolloReact/apolloclient/src/route/list/records/records.js\",\n    _s = $RefreshSig$();\n\nimport { useQuery, gql } from \"@apollo/client\";\n\nfunction Delete(props) {\n  const DELETE_ITEM = gql`\n  mutation($: String!, $password: String!) {\n    loginUser(username: $username, password: $password) {\n    \n      status\n    }\n  }\n`;\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"button\",\n      onClick: () => console.log(''),\n      value: \"Delete\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 5\n    }, this)\n  }, void 0, false);\n}\n\n_c = Delete;\nconst RECORDS = gql`\n  query{records{nome\n  id\n  price\n  barcode\n  }}\n`;\nexport default function Records() {\n  _s();\n\n  const {\n    loading,\n    error,\n    data\n  } = useQuery(RECORDS);\n  if (loading) return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"Loading...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 23\n  }, this);\n  if (error) return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"Error :(\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 21\n  }, this);\n  if (data) console.log(data);\n  return data.records.map(res => /*#__PURE__*/_jsxDEV(\"p\", {\n    children: [/*#__PURE__*/_jsxDEV(Delete, {\n      id: res.id\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this), \"nome:\", res.nome, \"id:\", res.id, \"Price:\", res.price, \" Barcode:\", res.barcode]\n  }, res.id, true, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 5\n  }, this));\n}\n\n_s(Records, \"OQZiY3KqWoytFPIJWw/H9Hrmbok=\", false, function () {\n  return [useQuery];\n});\n\n_c2 = Records;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Delete\");\n$RefreshReg$(_c2, \"Records\");","map":{"version":3,"sources":["/Users/danielpiga/Desktop/Apollo2 copy/ApolloReact/apolloclient/src/route/list/records/records.js"],"names":["useQuery","gql","Delete","props","DELETE_ITEM","console","log","RECORDS","Records","loading","error","data","records","map","res","id","nome","price","barcode"],"mappings":";;;;;;AAAA,SAASA,QAAT,EAAmBC,GAAnB,QAA8B,gBAA9B;;AAGA,SAASC,MAAT,CAAgBC,KAAhB,EAAsB;AACpB,QAAMC,WAAW,GAAGH,GAAI;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA,CAPE;AAYA,sBAEE;AAAA,2BACA;AAAO,MAAA,IAAI,EAAC,QAAZ;AAAqB,MAAA,OAAO,EAAE,MAAII,OAAO,CAACC,GAAR,CAAY,EAAZ,CAAlC;AAAmD,MAAA,KAAK,EAAC;AAAzD;AAAA;AAAA;AAAA;AAAA;AADA,mBAFF;AAMD;;KAnBQJ,M;AAwBT,MAAMK,OAAO,GAAGN,GAAI;AACpB;AACA;AACA;AACA;AACA;AACA,CANA;AAQA,eAAe,SAASO,OAAT,GAAmB;AAAA;;AAChC,QAAM;AAAEC,IAAAA,OAAF;AAAWC,IAAAA,KAAX;AAAkBC,IAAAA;AAAlB,MAA2BX,QAAQ,CAACO,OAAD,CAAzC;AACA,MAAIE,OAAJ,EAAa,oBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AACb,MAAIC,KAAJ,EAAW,oBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AACX,MAAGC,IAAH,EAASN,OAAO,CAACC,GAAR,CAAYK,IAAZ;AACT,SAAOA,IAAI,CAACC,OAAL,CAAaC,GAAb,CAAkBC,GAAD,iBACtB;AAAA,4BACE,QAAC,MAAD;AAAQ,MAAA,EAAE,EAAEA,GAAG,CAACC;AAAhB;AAAA;AAAA;AAAA;AAAA,YADF,WAC6BD,GAAG,CAACE,IADjC,SAEQF,GAAG,CAACC,EAFZ,YAGSD,GAAG,CAACG,KAHb,eAG6BH,GAAG,CAACI,OAHjC;AAAA,KAAQJ,GAAG,CAACC,EAAZ;AAAA;AAAA;AAAA;AAAA,UADK,CAAP;AAOD;;GAZuBP,O;UACWR,Q;;;MADXQ,O","sourcesContent":["import { useQuery, gql } from \"@apollo/client\";\n\n\nfunction Delete(props){\n  const DELETE_ITEM = gql`\n  mutation($: String!, $password: String!) {\n    loginUser(username: $username, password: $password) {\n    \n      status\n    }\n  }\n`;\n\n\n\n\n  return (\n\n    <>\n    <input type=\"button\" onClick={()=>console.log('')} value=\"Delete\"></input>\n    </>\n  )\n}\n\n\n\n\nconst RECORDS = gql`\n  query{records{nome\n  id\n  price\n  barcode\n  }}\n`;\n\nexport default function Records() {\n  const { loading, error, data } = useQuery(RECORDS);\n  if (loading) return <p>Loading...</p>;\n  if (error) return <p>Error :(</p>;\n  if(data )console.log(data);\n  return data.records.map((res) => (\n    <p key={res.id}>\n      <Delete id={res.id}/>nome:{res.nome} \n        id:{res.id}\n      Price:{res.price} Barcode:{res.barcode}\n    </p>\n  ));\n}\n"]},"metadata":{},"sourceType":"module"}