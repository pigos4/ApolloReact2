{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/danielpiga/Desktop/apollo2copia/ApolloReact2/ApolloReact/apolloclient/src/route/Dato/DatoIdToRender.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { gql, useMutation, useLazyQuery } from \"@apollo/client\";\n\nconst addNewTopic = require('./AddNewTopic').default;\n\nexport default function Dato() {\n  _s();\n\n  const [newTopic, setNewTopic] = useState({\n    id: \"36\",\n    name: \"\",\n    description: \"\",\n    extraInfo: \"\",\n    child: []\n  });\n  const [idToRende, setidTorender] = useState(\"36\");\n  const [functionToRender, setfunctionToRender] = useState(\"\");\n\n  function Funct(prop) {\n    console.log(prop, \"prop\");\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Name:\", prop.data.dato.name]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 16,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Description:\", prop.data.dato.Description]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 17,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Info:\", prop.data.dato.info]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 18,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"father\", prop.data.dato.father]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 19,\n          columnNumber: 15\n        }, this), prop.data.dato.child.map((x, index) => /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"button\",\n          value: x.Name,\n          onClick: () => setidTorender(`${x.ID}`)\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 23,\n          columnNumber: 19\n        }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            onChange: e => setNewTopic({ ...newTopic,\n              name: e.target.value\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 32,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            onChange: e => setNewTopic({ ...newTopic,\n              description: e.target.value\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 33,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            onChange: e => setNewTopic({ ...newTopic,\n              extraInfo: e.target.value\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 34,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"submit\",\n            onChange: () => addNewTopic(),\n            placeholder: \"Submit\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 35,\n            columnNumber: 17\n          }, this), newTopic.name]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 31,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 15,\n        columnNumber: 13\n      }, this)\n    }, void 0, false);\n  }\n\n  const DATO = gql`\n          query dato($id: String) {\n            dato(id: $id) {\n              name\n              info\n              Description\n              father\n              child {\n                ID\n                Name\n              }\n            }\n          }\n        `;\n  const [getFields, {\n    loading,\n    data\n  }] = useLazyQuery(DATO);\n  useEffect(() => {\n    getFields({\n      variables: {\n        id: idToRende\n      }\n    });\n\n    if (data) {\n      console.log(data);\n      setfunctionToRender( /*#__PURE__*/_jsxDEV(Funct, {\n        data: data\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 33\n      }, this));\n    }\n\n    return () => {\n      newTopic;\n      getFields({\n        variables: {\n          id: idToRende\n        }\n      });\n\n      if (data) {\n        console.log(data);\n        setfunctionToRender( /*#__PURE__*/_jsxDEV(Funct, {\n          data: data\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 33\n        }, this));\n      }\n    };\n  }, [data, getFields, idToRende, newTopic]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [functionToRender, idToRende]\n  }, void 0, true);\n}\n\n_s(Dato, \"Jos+ttN6uAEmVnncGOzHrNF5imU=\", false, function () {\n  return [useLazyQuery];\n});\n\n_c = Dato;\n\nvar _c;\n\n$RefreshReg$(_c, \"Dato\");","map":{"version":3,"sources":["/Users/danielpiga/Desktop/apollo2copia/ApolloReact2/ApolloReact/apolloclient/src/route/Dato/DatoIdToRender.js"],"names":["React","useState","useEffect","gql","useMutation","useLazyQuery","addNewTopic","require","default","Dato","newTopic","setNewTopic","id","name","description","extraInfo","child","idToRende","setidTorender","functionToRender","setfunctionToRender","Funct","prop","console","log","data","dato","Description","info","father","map","x","index","Name","ID","e","target","value","DATO","getFields","loading","variables"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,GAAT,EAAcC,WAAd,EAA2BC,YAA3B,QAA+C,gBAA/C;;AACA,MAAMC,WAAW,GAAGC,OAAO,CAAC,eAAD,CAAP,CAAyBC,OAA7C;;AACA,eAAe,SAASC,IAAT,GAAgB;AAAA;;AAC3B,QAAM,CAACC,QAAD,EAAUC,WAAV,IAAuBV,QAAQ,CAAC;AAClCW,IAAAA,EAAE,EAAE,IAD8B;AACrBC,IAAAA,IAAI,EAAE,EADe;AACRC,IAAAA,WAAW,EAAE,EADL;AACYC,IAAAA,SAAS,EAAE,EADvB;AAC8BC,IAAAA,KAAK,EAAE;AADrC,GAAD,CAArC;AAIA,QAAM,CAACC,SAAD,EAAYC,aAAZ,IAA6BjB,QAAQ,CAAC,IAAD,CAA3C;AACF,QAAM,CAACkB,gBAAD,EAAmBC,mBAAnB,IAA0CnB,QAAQ,CAAC,EAAD,CAAxD;;AACE,WAASoB,KAAT,CAAeC,IAAf,EAAqB;AACjBC,IAAAA,OAAO,CAACC,GAAR,CAAYF,IAAZ,EAAkB,MAAlB;AACA,wBACE;AAAA,6BACE;AAAA,gCACE;AAAA,8BAASA,IAAI,CAACG,IAAL,CAAUC,IAAV,CAAeb,IAAxB;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE;AAAA,qCAAgBS,IAAI,CAACG,IAAL,CAAUC,IAAV,CAAeC,WAA/B;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFF,eAGE;AAAA,8BAASL,IAAI,CAACG,IAAL,CAAUC,IAAV,CAAeE,IAAxB;AAAA;AAAA;AAAA;AAAA;AAAA,gBAHF,eAIE;AAAA,+BAAUN,IAAI,CAACG,IAAL,CAAUC,IAAV,CAAeG,MAAzB;AAAA;AAAA;AAAA;AAAA;AAAA,gBAJF,EAMGP,IAAI,CAACG,IAAL,CAAUC,IAAV,CAAeV,KAAf,CAAqBc,GAArB,CAAyB,CAACC,CAAD,EAAIC,KAAJ,kBAEtB;AACE,UAAA,IAAI,EAAC,QADP;AAGE,UAAA,KAAK,EAAED,CAAC,CAACE,IAHX;AAIE,UAAA,OAAO,EAAE,MAAMf,aAAa,CAAE,GAAEa,CAAC,CAACG,EAAG,EAAT;AAJ9B,WAEOF,KAFP;AAAA;AAAA;AAAA;AAAA,gBAFH,CANH,eAgBE;AAAA,kCACE;AAAO,YAAA,IAAI,EAAC,MAAZ;AAAmB,YAAA,QAAQ,EAAGG,CAAD,IAAKxB,WAAW,CAAC,EAAE,GAAGD,QAAL;AAAeG,cAAAA,IAAI,EAAEsB,CAAC,CAACC,MAAF,CAASC;AAA9B,aAAD;AAA7C;AAAA;AAAA;AAAA;AAAA,kBADF,eAEE;AAAO,YAAA,IAAI,EAAC,MAAZ;AAAmB,YAAA,QAAQ,EAAGF,CAAD,IAAKxB,WAAW,CAAC,EAAE,GAAGD,QAAL;AAAeI,cAAAA,WAAW,EAAEqB,CAAC,CAACC,MAAF,CAASC;AAArC,aAAD;AAA7C;AAAA;AAAA;AAAA;AAAA,kBAFF,eAGE;AAAO,YAAA,IAAI,EAAC,MAAZ;AAAmB,YAAA,QAAQ,EAAGF,CAAD,IAAKxB,WAAW,CAAC,EAAE,GAAGD,QAAL;AAAeK,cAAAA,SAAS,EAAEoB,CAAC,CAACC,MAAF,CAASC;AAAnC,aAAD;AAA7C;AAAA;AAAA;AAAA;AAAA,kBAHF,eAIE;AAAO,YAAA,IAAI,EAAC,QAAZ;AAAqB,YAAA,QAAQ,EAAE,MAAI/B,WAAW,EAA9C;AAAiD,YAAA,WAAW,EAAC;AAA7D;AAAA;AAAA;AAAA;AAAA,kBAJF,EAKGI,QAAQ,CAACG,IALZ;AAAA;AAAA;AAAA;AAAA;AAAA,gBAhBF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF,qBADF;AA8BD;;AAEC,QAAMyB,IAAI,GAAGnC,GAAI;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAbQ;AAcA,QAAM,CAACoC,SAAD,EAAY;AAAEC,IAAAA,OAAF;AAAWf,IAAAA;AAAX,GAAZ,IAAiCpB,YAAY,CAACiC,IAAD,CAAnD;AACApC,EAAAA,SAAS,CAAC,MAAM;AACdqC,IAAAA,SAAS,CAAC;AAAEE,MAAAA,SAAS,EAAE;AAAE7B,QAAAA,EAAE,EAAEK;AAAN;AAAb,KAAD,CAAT;;AAEA,QAAIQ,IAAJ,EAAU;AACRF,MAAAA,OAAO,CAACC,GAAR,CAAYC,IAAZ;AACAL,MAAAA,mBAAmB,eAAC,QAAC,KAAD;AAAO,QAAA,IAAI,EAAEK;AAAb;AAAA;AAAA;AAAA;AAAA,cAAD,CAAnB;AACD;;AACD,WAAO,MAAM;AACXf,MAAAA,QAAQ;AACV6B,MAAAA,SAAS,CAAC;AAAEE,QAAAA,SAAS,EAAE;AAAE7B,UAAAA,EAAE,EAAEK;AAAN;AAAb,OAAD,CAAT;;AACA,UAAIQ,IAAJ,EAAU;AACRF,QAAAA,OAAO,CAACC,GAAR,CAAYC,IAAZ;AACAL,QAAAA,mBAAmB,eAAC,QAAC,KAAD;AAAO,UAAA,IAAI,EAAEK;AAAb;AAAA;AAAA;AAAA;AAAA,gBAAD,CAAnB;AACD;AACF,KAPC;AASD,GAhBQ,EAgBN,CAACA,IAAD,EAAOc,SAAP,EAAkBtB,SAAlB,EAA4BP,QAA5B,CAhBM,CAAT;AAiBA,sBAAO;AAAA,eAAGS,gBAAH,EAAqBF,SAArB;AAAA,kBAAP;AACD;;GA1EiBR,I;UAuDuBJ,Y;;;KAvDvBI,I","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { gql, useMutation, useLazyQuery } from \"@apollo/client\";\nconst addNewTopic = require('./AddNewTopic').default;\nexport default function Dato() {\n    const [newTopic,setNewTopic]=useState({\n        id: \"36\",    name: \"\",    description: \"\",    extraInfo: \"\",    child: [],\n      })\n\n    const [idToRende, setidTorender] = useState(\"36\");\n  const [functionToRender, setfunctionToRender] = useState(\"\");\n    function Funct(prop) {\n        console.log(prop, \"prop\");\n        return (\n          <>\n            <div>\n              <p>Name:{prop.data.dato.name}</p>\n              <p>Description:{prop.data.dato.Description}</p>\n              <p>Info:{prop.data.dato.info}</p>\n              <p>father{prop.data.dato.father}</p>\n    \n              {prop.data.dato.child.map((x, index) => (\n            \n                  <input\n                    type=\"button\"\n                    key={index}\n                    value={x.Name}\n                    onClick={() => setidTorender(`${x.ID}`)}\n                  ></input>\n                \n              ))}\n              <div>\n                <input type=\"text\" onChange={(e)=>setNewTopic({ ...newTopic, name: e.target.value })}></input>\n                <input type=\"text\" onChange={(e)=>setNewTopic({ ...newTopic, description: e.target.value })}></input>\n                <input type=\"text\" onChange={(e)=>setNewTopic({ ...newTopic, extraInfo: e.target.value })}></input>\n                <input type=\"submit\" onChange={()=>addNewTopic()}placeholder=\"Submit\"></input>\n                {newTopic.name}\n\n\n              </div>\n            </div>\n          </>\n        );\n      }\n   \n        const DATO = gql`\n          query dato($id: String) {\n            dato(id: $id) {\n              name\n              info\n              Description\n              father\n              child {\n                ID\n                Name\n              }\n            }\n          }\n        `;\n        const [getFields, { loading, data }] = useLazyQuery(DATO);\n        useEffect(() => {\n          getFields({ variables: { id: idToRende } });\n         \n          if (data) {\n            console.log(data);\n            setfunctionToRender(<Funct data={data} />);\n          }\n          return () => {\n            newTopic\n          getFields({ variables: { id: idToRende } });\n          if (data) {\n            console.log(data);\n            setfunctionToRender(<Funct data={data} />);\n          }\n        };\n        \n        }, [data, getFields, idToRende,newTopic]);\n        return <>{functionToRender}{idToRende}</>;\n      }\n      \n    \n      \n\n\n"]},"metadata":{},"sourceType":"module"}