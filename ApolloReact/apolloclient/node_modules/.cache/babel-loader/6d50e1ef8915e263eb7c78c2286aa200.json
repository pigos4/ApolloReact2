{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/danielpiga/Desktop/Apollo2 copy/ApolloReact/apolloclient/src/route/Dato.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { gql, useMutation } from \"@apollo/client\";\nexport default function Home() {\n  _s();\n\n  //const [createRender, setcreaterender] = useState(<CreateRender id=\"101\" />);\n  const [inputsUser, setinputsUser] = useState({\n    id: \"\",\n    name: \"\",\n    description: \"\",\n    extraInfo: \"\",\n    child: []\n  });\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        onChange: e => setinputsUser({ ...userinput,\n          nane: e.targent.value\n        }),\n        placeholder: \"Name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 10,\n        columnNumber: 12\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n} //const [dataInput, { data, loading }] = useMutation(DATA_INPUT);\n// const DATA_INPUT = gql`\n// mutation($username: String!, $password: String!, ) {\n//   loginUser(  username: $username, password:$password) {\n//     id,\n//     username,\n//     status\n//   }\n// }\n// `;\n// const dat = [\n//   { id: 1, name: \"javascript\", moreData: \"more info\", children: [101, 102] },\n//   { id: 101, name: \"Array\", moreData: \"aaarraaayy\", children: [103, 104] },\n//   { id: 102, name: \"Object\", moreData: \"ooobbbjjject\", children: [105, 106] },\n//   {\n//     id: 103,\n//     name: \"Arrayspec1\",\n//     moreData: \"aaarraaayy\",\n//     children: [107, 108],\n//   },\n//   {\n//     id: 104,\n//     name: \"Arrayspec2\",\n//     moreData: \"ooobbbjjject\",\n//     children: [101, 102],\n//   },\n//   {\n//     id: 105,\n//     name: \"objectspec1\",\n//     moreData: \"aaarraaayy\",\n//     children: [101, 102],\n//   },\n//   {\n//     id: 106,\n//     name: \"Objectspec2\",\n//     moreData: \"ooobbbjjject\",\n//     children: [101, 102],\n//   },\n//   {\n//     id: 107,\n//     name: \"Objectspec3\",\n//     moreData: \"ooobbbjjject\",\n//     children: [101, 102],\n//   },\n//   {\n//     id: 108,\n//     name: \"Objectspec4\",\n//     moreData: \"ooobbbjjject\",\n//     children: [101, 102],\n//   },\n// ];\n// function buttonNameFromArray(id) {\n//   let obj = dat.find((s) => s.id === id);\n//   console.log(obj, \"objbutton\");\n//   return (\n//     <input\n//       type=\"button\"\n//       value={obj.name}\n//       key={obj.id}\n//       onClick={() => setcreaterender(<CreateRender id={obj.id} />)}\n//     ></input>\n//   );\n// }\n// function CreateRender(props) {\n//   console.log(props.id, \"propsid\");\n//   let obj = dat.findIndex((x) => x.id === parseInt(props.id));\n//   console.log(obj, \"obj\");\n//   return (\n//     <>\n//       <div>\n//         nome madre:{dat[obj].name} figli:\n//         {dat[obj].children.map((id) => buttonNameFromArray(id))}\n//       </div>\n//     </>\n//   );\n// }\n\n_s(Home, \"AKYo1YjMm7y9702E7FprQXhSUo4=\");\n\n_c = Home;\n\nvar _c;\n\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"sources":["/Users/danielpiga/Desktop/Apollo2 copy/ApolloReact/apolloclient/src/route/Dato.js"],"names":["React","useState","useEffect","gql","useMutation","Home","inputsUser","setinputsUser","id","name","description","extraInfo","child","e","userinput","nane","targent","value"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,GAAT,EAAcC,WAAd,QAAiC,gBAAjC;AACA,eAAe,SAASC,IAAT,GAAgB;AAAA;;AAC7B;AACA,QAAM,CAACC,UAAD,EAAYC,aAAZ,IAA2BN,QAAQ,CAAC;AAACO,IAAAA,EAAE,EAAC,EAAJ;AAAOC,IAAAA,IAAI,EAAC,EAAZ;AAAeC,IAAAA,WAAW,EAAC,EAA3B;AAA8BC,IAAAA,SAAS,EAAC,EAAxC;AAA2CC,IAAAA,KAAK,EAAC;AAAjD,GAAD,CAAzC;AAGA,sBACE;AAAA,2BACE;AAAA,6BAAK;AAAO,QAAA,IAAI,EAAC,MAAZ;AAAmB,QAAA,QAAQ,EAAIC,CAAD,IAAKN,aAAa,CAAC,EAAC,GAAGO,SAAJ;AAAcC,UAAAA,IAAI,EAACF,CAAC,CAACG,OAAF,CAAUC;AAA7B,SAAD,CAAhD;AAAwF,QAAA,WAAW,EAAC;AAApG;AAAA;AAAA;AAAA;AAAA;AAAL;AAAA;AAAA;AAAA;AAAA;AADF,mBADF;AAMD,C,CAGA;AAEC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;GA5FsBZ,I;;KAAAA,I","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { gql, useMutation } from \"@apollo/client\";\nexport default function Home() {\n  //const [createRender, setcreaterender] = useState(<CreateRender id=\"101\" />);\n  const [inputsUser,setinputsUser]=useState({id:\"\",name:\"\",description:\"\",extraInfo:\"\",child:[]});\n \n\n  return (\n    <>\n      <div><input type=\"text\" onChange={((e)=>setinputsUser({...userinput,nane:e.targent.value}))} placeholder=\"Name\"></input></div>\n      {/*createRender*/}\n    </>\n  );\n}\n\n\n //const [dataInput, { data, loading }] = useMutation(DATA_INPUT);\n\n  // const DATA_INPUT = gql`\n  // mutation($username: String!, $password: String!, ) {\n  //   loginUser(  username: $username, password:$password) {\n  //     id,\n  //     username,\n  //     status\n  //   }\n  // }\n  // `;\n  // const dat = [\n  //   { id: 1, name: \"javascript\", moreData: \"more info\", children: [101, 102] },\n  //   { id: 101, name: \"Array\", moreData: \"aaarraaayy\", children: [103, 104] },\n  //   { id: 102, name: \"Object\", moreData: \"ooobbbjjject\", children: [105, 106] },\n\n  //   {\n  //     id: 103,\n  //     name: \"Arrayspec1\",\n  //     moreData: \"aaarraaayy\",\n  //     children: [107, 108],\n  //   },\n  //   {\n  //     id: 104,\n  //     name: \"Arrayspec2\",\n  //     moreData: \"ooobbbjjject\",\n  //     children: [101, 102],\n  //   },\n\n  //   {\n  //     id: 105,\n  //     name: \"objectspec1\",\n  //     moreData: \"aaarraaayy\",\n  //     children: [101, 102],\n  //   },\n  //   {\n  //     id: 106,\n  //     name: \"Objectspec2\",\n  //     moreData: \"ooobbbjjject\",\n  //     children: [101, 102],\n  //   },\n  //   {\n  //     id: 107,\n  //     name: \"Objectspec3\",\n  //     moreData: \"ooobbbjjject\",\n  //     children: [101, 102],\n  //   },\n  //   {\n  //     id: 108,\n  //     name: \"Objectspec4\",\n  //     moreData: \"ooobbbjjject\",\n  //     children: [101, 102],\n  //   },\n  // ];\n  // function buttonNameFromArray(id) {\n  //   let obj = dat.find((s) => s.id === id);\n  //   console.log(obj, \"objbutton\");\n  //   return (\n  //     <input\n  //       type=\"button\"\n  //       value={obj.name}\n  //       key={obj.id}\n  //       onClick={() => setcreaterender(<CreateRender id={obj.id} />)}\n  //     ></input>\n  //   );\n  // }\n  // function CreateRender(props) {\n  //   console.log(props.id, \"propsid\");\n  //   let obj = dat.findIndex((x) => x.id === parseInt(props.id));\n  //   console.log(obj, \"obj\");\n  //   return (\n  //     <>\n  //       <div>\n  //         nome madre:{dat[obj].name} figli:\n  //         {dat[obj].children.map((id) => buttonNameFromArray(id))}\n  //       </div>\n  //     </>\n  //   );\n  // }\n"]},"metadata":{},"sourceType":"module"}