{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/danielpiga/Desktop/Apollo2 copy/ApolloReact/apolloclient/src/graphql/mutation/Signup.js\",\n    _s = $RefreshSig$();\n\nimport { React, useState } from \"react\";\nimport { gql, useMutation } from \"@apollo/client\";\nconst ADD_USER = gql`\n  mutation($name: String!, $username: String!, $password: String!) {\n    addUser(name: $name, username: $username, password: $password) {\n      response\n      \n    }\n  }\n`;\nexport default function Mut() {\n  _s();\n\n  const [addUser, {\n    data,\n    loading\n  }] = useMutation(ADD_USER);\n  const [user, setUser] = useState({\n    name: \"\",\n    username: \"\",\n    password: \"\"\n  });\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      onChange: e => setUser({\n        \"name\": e.target.value,\n        \"username\": user.username,\n        \"password\": user.password\n      }),\n      placeholder: \"nome\",\n      children: \" \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 5\n    }, this), \" \", /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      onChange: e => {\n        setUser({\n          \"name\": user.name,\n          \"username\": e.target.value,\n          \"password\": user.password\n        });\n      },\n      placeholder: \"username\",\n      children: \" \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 38\n    }, this), \" \", /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"password\",\n      onChange: e => {\n        setUser({\n          \"name\": user.name,\n          \"username\": user.username,\n          \"password\": e.target.value\n        });\n      },\n      placeholder: \"password\",\n      children: \" \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 42\n    }, this), \" \", /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"button\",\n      value: \"submit\",\n      onClick: () => {\n        addUser({\n          variables: user\n        });\n      },\n      children: \" \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 42\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"button\",\n      onClick: () => console.log(data),\n      value: \"consolelog\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 5\n    }, this), user.name, user.username, user.password, \" \", loading ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \" loading \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 17\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"done\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 39\n    }, this), \" \", data ? `User registered successfully ${data.addUser.response}\"` : \"\", \" \"]\n  }, void 0, true);\n}\n\n_s(Mut, \"rfTBKMQQ50v7mqVQplnH1OBQseE=\", false, function () {\n  return [useMutation];\n});\n\n_c = Mut;\n\nvar _c;\n\n$RefreshReg$(_c, \"Mut\");","map":{"version":3,"sources":["/Users/danielpiga/Desktop/Apollo2 copy/ApolloReact/apolloclient/src/graphql/mutation/Signup.js"],"names":["React","useState","gql","useMutation","ADD_USER","Mut","addUser","data","loading","user","setUser","name","username","password","e","target","value","variables","console","log","response"],"mappings":";;;;;;AAAA,SACEA,KADF,EAEEC,QAFF,QAGO,OAHP;AAIA,SACEC,GADF,EAEEC,WAFF,QAGO,gBAHP;AAKA,MAAMC,QAAQ,GAAGF,GAAK;AACtB;AACA;AACA;AACA;AACA;AACA;AACA,CAPA;AASA,eAAe,SAASG,GAAT,GAAe;AAAA;;AAC5B,QAAM,CAACC,OAAD,EAAU;AACdC,IAAAA,IADc;AAEdC,IAAAA;AAFc,GAAV,IAGDL,WAAW,CAACC,QAAD,CAHhB;AAIA,QAAM,CAACK,IAAD,EAAOC,OAAP,IAAkBT,QAAQ,CAAC;AAC/BU,IAAAA,IAAI,EAAE,EADyB;AAE/BC,IAAAA,QAAQ,EAAE,EAFqB;AAG/BC,IAAAA,QAAQ,EAAE;AAHqB,GAAD,CAAhC;AAKA,sBAAS;AAAA,4BAEP;AACM,MAAA,IAAI,EAAG,MADb;AAEA,MAAA,QAAQ,EACLC,CAAD,IAAOJ,OAAO,CAAC;AACb,gBAAQI,CAAC,CAACC,MAAF,CAASC,KADJ;AAEb,oBAAYP,IAAI,CAACG,QAFJ;AAGb,oBAAYH,IAAI,CAACI;AAHJ,OAAD,CAHhB;AASA,MAAA,WAAW,EAAG,MATd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAFO,oBAW0B;AAC3B,MAAA,IAAI,EAAG,MADoB;AAEjC,MAAA,QAAQ,EACLC,CAAD,IAAO;AACLJ,QAAAA,OAAO,CAAC;AACN,kBAAQD,IAAI,CAACE,IADP;AAEN,sBAAYG,CAAC,CAACC,MAAF,CAASC,KAFf;AAGN,sBAAYP,IAAI,CAACI;AAHX,SAAD,CAAP;AAKD,OAT8B;AAWjC,MAAA,WAAW,EAAG,UAXmB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAX1B,oBAsB8B;AAC/B,MAAA,IAAI,EAAG,UADwB;AAErC,MAAA,QAAQ,EACLC,CAAD,IAAO;AACLJ,QAAAA,OAAO,CAAC;AACN,kBAAQD,IAAI,CAACE,IADP;AAEN,sBAAYF,IAAI,CAACG,QAFX;AAGN,sBAAYE,CAAC,CAACC,MAAF,CAASC;AAHf,SAAD,CAAP;AAKD,OATkC;AAWrC,MAAA,WAAW,EAAG,UAXuB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAtB9B,oBAiC8B;AAC/B,MAAA,IAAI,EAAG,QADwB;AAErC,MAAA,KAAK,EAAG,QAF6B;AAGrC,MAAA,OAAO,EACL,MAAM;AACJV,QAAAA,OAAO,CAAC;AACNW,UAAAA,SAAS,EAAER;AADL,SAAD,CAAP;AAGD,OARkC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAjC9B,eA4CP;AACM,MAAA,IAAI,EAAG,QADb;AAEA,MAAA,OAAO,EACL,MAAMS,OAAO,CAACC,GAAR,CAAYZ,IAAZ,CAHR;AAKA,MAAA,KAAK,EAAG;AALR;AAAA;AAAA;AAAA;AAAA,YA5CO,EAkDGE,IAAI,CAACE,IAlDR,EAkDcF,IAAI,CAACG,QAlDnB,EAkD6BH,IAAI,CAACI,QAlDlC,OAmDLL,OAAO,gBAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAH,gBAAyB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAnD3B,OAqDLD,IAAI,GAAI,gCAA+BA,IAAI,CAACD,OAAL,CAAac,QAAS,GAAzD,GAA8D,EArD7D;AAAA,kBAAT;AAyDD;;GAnEuBf,G;UAIjBF,W;;;KAJiBE,G","sourcesContent":["import {\n  React,\n  useState\n} from \"react\";\nimport {\n  gql,\n  useMutation\n} from \"@apollo/client\";\n\nconst ADD_USER = gql `\n  mutation($name: String!, $username: String!, $password: String!) {\n    addUser(name: $name, username: $username, password: $password) {\n      response\n      \n    }\n  }\n`;\n\nexport default function Mut() {\n  const [addUser, {\n    data,\n    loading\n  }] = useMutation(ADD_USER);\n  const [user, setUser] = useState({\n    name: \"\",\n    username: \"\",\n    password: \"\",\n  });\n  return ( <\n    >\n    <\n    input type = \"text\"\n    onChange = {\n      (e) => setUser({\n        \"name\": e.target.value,\n        \"username\": user.username,\n        \"password\": user.password\n      })\n    }\n    placeholder = \"nome\" > < /input> <\n    input type = \"text\"\n    onChange = {\n      (e) => {\n        setUser({\n          \"name\": user.name,\n          \"username\": e.target.value,\n          \"password\": user.password\n        })\n      }\n    }\n    placeholder = \"username\" > < /input> <\n    input type = \"password\"\n    onChange = {\n      (e) => {\n        setUser({\n          \"name\": user.name,\n          \"username\": user.username,\n          \"password\": e.target.value\n        })\n      }\n    }\n    placeholder = \"password\" > < /input> <\n    input type = \"button\"\n    value = \"submit\"\n    onClick = {\n      () => {\n        addUser({\n          variables: user\n        });\n      }\n    } > < /input>\n\n    <\n    input type = \"button\"\n    onClick = {\n      () => console.log(data)\n    }\n    value = \"consolelog\" >\n    < /input>{user.name}{user.username}{user.password} {\n      loading ? < p > loading < /p> : <p>done</p >\n    } {\n      data ? `User registered successfully ${data.addUser.response}\"` : \"\"\n    } <\n    />\n  );\n}"]},"metadata":{},"sourceType":"module"}