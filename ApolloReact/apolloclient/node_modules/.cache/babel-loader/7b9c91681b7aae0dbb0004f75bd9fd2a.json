{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/danielpiga/Desktop/Apollo2 copy/ApolloReact/apolloclient/src/route/Crypto.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, Component } from \"react\";\nimport { gql, useMutation, useLazyQuery } from \"@apollo/client\";\nimport { Line } from 'react-chartjs-2';\nexport default function CRYPTO() {\n  _s();\n\n  //const [labels,setlabels]=useState([1,2,3,4,5,6,7,9]);\n  // const [valueCrypto,setvalueCrypto]=useState([0.10,0.20,0.5,0.4,0.5,0.6,0.7,0.9]);\n  const [period, setperiod] = useState({\n    labels: [1, 2, 3, 4, 5, 6, 7, 9],\n    datasets: [{\n      label: 'My First dataset',\n      fill: false,\n      lineTension: 0.1,\n      backgroundColor: 'rgba(75,192,192,0.4)',\n      borderColor: 'rgba(75,192,192,1)',\n      borderCapStyle: 'butt',\n      borderDash: [],\n      borderDashOffset: 0.0,\n      borderJoinStyle: 'miter',\n      pointBorderColor: 'rgba(75,192,192,1)',\n      pointBackgroundColor: '#fff',\n      pointBorderWidth: 1,\n      pointHoverRadius: 5,\n      pointHoverBackgroundColor: 'rgba(75,192,192,1)',\n      pointHoverBorderColor: 'rgba(220,220,220,1)',\n      pointHoverBorderWidth: 2,\n      pointRadius: 1,\n      pointHitRadius: 10,\n      data: [0.10, 0.20, 0.5, 0.4, 0.5, 0.6, 0.7, 0.9]\n    }]\n  });\n\n  function LineDemo() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Chart\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Line, {\n        data: period\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 9\n    }, this);\n  }\n\n  const CRYPTO = gql`\n  query crypto($symb: String) {\n    crypto(symb: $symb) {\n      name\n      value\n    }\n  }\n`;\n  const [getFields, {\n    loading,\n    data\n  }] = useLazyQuery(CRYPTO);\n  const [inputsUser, setinputsUser] = useState({\n    symbol: undefined\n  });\n\n  if (data) {}\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      onChange: e => setinputsUser({\n        symbol: e.target.value\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 6\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"submit\",\n      onClick: () => getFields({\n        variables: {\n          symb: inputsUser.symbol\n        }\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 6\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"submit\",\n      onClick: () => {\n        setperiod({\n          labels: [1, 2, 3, 4, 5, 6, 7, 9],\n          datasets: [{\n            label: 'My First dataset',\n            fill: false,\n            lineTension: 0.1,\n            backgroundColor: 'rgba(75,192,192,0.4)',\n            borderColor: 'rgba(75,192,192,1)',\n            borderCapStyle: 'butt',\n            borderDash: [],\n            borderDashOffset: 0.0,\n            borderJoinStyle: 'miter',\n            pointBorderColor: 'rgba(75,192,192,1)',\n            pointBackgroundColor: '#fff',\n            pointBorderWidth: 1,\n            pointHoverRadius: 5,\n            pointHoverBackgroundColor: 'rgba(75,192,192,1)',\n            pointHoverBorderColor: 'rgba(220,220,220,1)',\n            pointHoverBorderWidth: 2,\n            pointRadius: 1,\n            pointHitRadius: 10,\n            data: [0.10, 0.20, 0.5, 0.4, 0.5, 0.6, 0.7, 0.9]\n          }]\n        });\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 6\n    }, this), /*#__PURE__*/_jsxDEV(LineDemo, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 6\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"submit\",\n      onClick: () => console.log(period, labels)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 6\n    }, this)]\n  }, void 0, true);\n}\n\n_s(CRYPTO, \"mM2VEDaV087b5DTfpyX9AdF6jeM=\", false, function () {\n  return [useLazyQuery];\n});\n\n_c = CRYPTO;\n\nvar _c;\n\n$RefreshReg$(_c, \"CRYPTO\");","map":{"version":3,"sources":["/Users/danielpiga/Desktop/Apollo2 copy/ApolloReact/apolloclient/src/route/Crypto.js"],"names":["React","useState","useEffect","Component","gql","useMutation","useLazyQuery","Line","CRYPTO","period","setperiod","labels","datasets","label","fill","lineTension","backgroundColor","borderColor","borderCapStyle","borderDash","borderDashOffset","borderJoinStyle","pointBorderColor","pointBackgroundColor","pointBorderWidth","pointHoverRadius","pointHoverBackgroundColor","pointHoverBorderColor","pointHoverBorderWidth","pointRadius","pointHitRadius","data","LineDemo","getFields","loading","inputsUser","setinputsUser","symbol","undefined","e","target","value","variables","symb","console","log"],"mappings":"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","sourcesContent":["import React, { useState, useEffect,Component } from \"react\";\nimport { gql, useMutation,  useLazyQuery } from \"@apollo/client\";\nimport { Line } from 'react-chartjs-2';\n\nexport default function CRYPTO() {\n   //const [labels,setlabels]=useState([1,2,3,4,5,6,7,9]);\n\n   // const [valueCrypto,setvalueCrypto]=useState([0.10,0.20,0.5,0.4,0.5,0.6,0.7,0.9]);\n\n    const [period,setperiod]=useState({\n        labels: [1,2,3,4,5,6,7,9],\n        datasets: [\n          {\n            label: 'My First dataset',\n            fill: false,\n            lineTension: 0.1,\n            backgroundColor: 'rgba(75,192,192,0.4)',\n            borderColor: 'rgba(75,192,192,1)',\n            borderCapStyle: 'butt',\n            borderDash: [],\n            borderDashOffset: 0.0,\n            borderJoinStyle: 'miter',\n            pointBorderColor: 'rgba(75,192,192,1)',\n            pointBackgroundColor: '#fff',\n            pointBorderWidth: 1,\n            pointHoverRadius: 5,\n            pointHoverBackgroundColor: 'rgba(75,192,192,1)',\n            pointHoverBorderColor: 'rgba(220,220,220,1)',\n            pointHoverBorderWidth: 2,\n            pointRadius: 1,\n            pointHitRadius: 10,\n            data: [0.10,0.20,0.5,0.4,0.5,0.6,0.7,0.9]\n          }\n        ]\n      })\n      \nfunction LineDemo (){\n      return (\n        <div>\n          <h2>Chart</h2>\n          <Line  data={period} />\n        </div>\n      );\n    \n   \n  }\n  const CRYPTO = gql`\n  query crypto($symb: String) {\n    crypto(symb: $symb) {\n      name\n      value\n    }\n  }\n`;\nconst [getFields, { loading, data }] = useLazyQuery(CRYPTO);\n const [inputsUser, setinputsUser] = useState({\n    symbol: undefined,\n    \n  });\n  if(data){\n\n  }\n\n return (\n     <>\n     <input type=\"text\" onChange={(e)=>setinputsUser({symbol:e.target.value})}></input>\n     <input type=\"submit\" onClick={()=>getFields({ variables: { symb: inputsUser.symbol } })}></input>\n     <input type=\"submit\" onClick={()=> {setperiod({\n\n\n    labels: [1,2,3,4,5,6,7,9],\n    datasets: [\n      {\n        label: 'My First dataset',\n        fill: false,\n        lineTension: 0.1,\n        backgroundColor: 'rgba(75,192,192,0.4)',\n        borderColor: 'rgba(75,192,192,1)',\n        borderCapStyle: 'butt',\n        borderDash: [],\n        borderDashOffset: 0.0,\n        borderJoinStyle: 'miter',\n        pointBorderColor: 'rgba(75,192,192,1)',\n        pointBackgroundColor: '#fff',\n        pointBorderWidth: 1,\n        pointHoverRadius: 5,\n        pointHoverBackgroundColor: 'rgba(75,192,192,1)',\n        pointHoverBorderColor: 'rgba(220,220,220,1)',\n        pointHoverBorderWidth: 2,\n        pointRadius: 1,\n        pointHitRadius: 10,\n        data: [0.10,0.20,0.5,0.4,0.5,0.6,0.7,0.9]\n      }\n    ]\n  \n\n\n\n\n\n     })}}></input>\n     <LineDemo/>\n     <input type=\"submit\" onClick={()=>console.log(period,labels)}></input>\n     </>\n )}\n\n\n\n \n  "]},"metadata":{},"sourceType":"module"}