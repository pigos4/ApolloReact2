{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/danielpiga/Desktop/Apollo2 copy/ApolloReact/apolloclient/src/graphql/mutation/Signup.js\",\n    _s = $RefreshSig$();\n\nimport { React, useState } from \"react\";\nimport { gql, useMutation } from \"@apollo/client\";\nconst ADD_USER = gql`\n  mutation($name: String!, $username: String!, $password: String!) {\n    addUser(name: $name, username: $username, password: $password) {\n      response\n    }\n  }\n`;\nexport default function Mut() {\n  _s();\n\n  const [addUser, {\n    data,\n    loading\n  }] = useMutation(ADD_USER);\n  const [user, setUser] = useState({\n    name: \"\",\n    username: \"\",\n    password: \"\"\n  });\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      lassName: \"Container\",\n      children: [\"      \", /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        onChange: e => setUser({\n          name: e.target.value,\n          username: user.username,\n          password: user.password\n        }),\n        placeholder: \"Name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 16,\n        columnNumber: 39\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        onChange: e => {\n          setUser({\n            name: user.name,\n            username: e.target.value,\n            password: user.password\n          });\n        },\n        placeholder: \"Username\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"password\",\n        onChange: e => {\n          setUser({\n            name: user.name,\n            username: user.username,\n            password: e.target.value\n          });\n        },\n        placeholder: \"Password\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"button\",\n        value: \"Submit\",\n        onClick: () => {\n          addUser({\n            variables: user\n          });\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 7\n      }, this), user.name, user.username, user.password, loading ? /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"loading\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 18\n      }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"done\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 35\n      }, this), data ? `${data.addUser.response}\"` : \"\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n}\n\n_s(Mut, \"oP1oJqIy4Fanb5dc/+WJIeYZjVc=\", false, function () {\n  return [useMutation];\n});\n\n_c = Mut;\n\nvar _c;\n\n$RefreshReg$(_c, \"Mut\");","map":{"version":3,"sources":["/Users/danielpiga/Desktop/Apollo2 copy/ApolloReact/apolloclient/src/graphql/mutation/Signup.js"],"names":["React","useState","gql","useMutation","ADD_USER","Mut","addUser","data","loading","user","setUser","name","username","password","e","target","value","variables","response"],"mappings":";;;;;;AAAA,SAASA,KAAT,EAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,GAAT,EAAcC,WAAd,QAAiC,gBAAjC;AAEA,MAAMC,QAAQ,GAAGF,GAAI;AACrB;AACA;AACA;AACA;AACA;AACA,CANA;AAQA,eAAe,SAASG,GAAT,GAAe;AAAA;;AAC5B,QAAM,CAACC,OAAD,EAAU;AAAEC,IAAAA,IAAF;AAAQC,IAAAA;AAAR,GAAV,IAA+BL,WAAW,CAACC,QAAD,CAAhD;AACA,QAAM,CAACK,IAAD,EAAOC,OAAP,IAAkBT,QAAQ,CAAC;AAAEU,IAAAA,IAAI,EAAE,EAAR;AAAYC,IAAAA,QAAQ,EAAE,EAAtB;AAA0BC,IAAAA,QAAQ,EAAE;AAApC,GAAD,CAAhC;AACA,sBACE;AAAA,2BAAE;AAAK,MAAA,QAAQ,EAAC,WAAd;AAAA,wCAAgC;AAC9B,QAAA,IAAI,EAAC,MADyB;AAE9B,QAAA,QAAQ,EAAGC,CAAD,IACRJ,OAAO,CAAC;AACNC,UAAAA,IAAI,EAAEG,CAAC,CAACC,MAAF,CAASC,KADT;AAENJ,UAAAA,QAAQ,EAAEH,IAAI,CAACG,QAFT;AAGNC,UAAAA,QAAQ,EAAEJ,IAAI,CAACI;AAHT,SAAD,CAHqB;AAS9B,QAAA,WAAW,EAAC;AATkB;AAAA;AAAA;AAAA;AAAA,cAAhC,eAWA;AACE,QAAA,IAAI,EAAC,MADP;AAEE,QAAA,QAAQ,EAAGC,CAAD,IAAO;AACfJ,UAAAA,OAAO,CAAC;AACNC,YAAAA,IAAI,EAAEF,IAAI,CAACE,IADL;AAENC,YAAAA,QAAQ,EAAEE,CAAC,CAACC,MAAF,CAASC,KAFb;AAGNH,YAAAA,QAAQ,EAAEJ,IAAI,CAACI;AAHT,WAAD,CAAP;AAKD,SARH;AASE,QAAA,WAAW,EAAC;AATd;AAAA;AAAA;AAAA;AAAA,cAXA,eAsBA;AACE,QAAA,IAAI,EAAC,UADP;AAEE,QAAA,QAAQ,EAAGC,CAAD,IAAO;AACfJ,UAAAA,OAAO,CAAC;AACNC,YAAAA,IAAI,EAAEF,IAAI,CAACE,IADL;AAENC,YAAAA,QAAQ,EAAEH,IAAI,CAACG,QAFT;AAGNC,YAAAA,QAAQ,EAAEC,CAAC,CAACC,MAAF,CAASC;AAHb,WAAD,CAAP;AAKD,SARH;AASE,QAAA,WAAW,EAAC;AATd;AAAA;AAAA;AAAA;AAAA,cAtBA,eAiCA;AACE,QAAA,IAAI,EAAC,QADP;AAEE,QAAA,KAAK,EAAC,QAFR;AAGE,QAAA,OAAO,EAAE,MAAM;AACbV,UAAAA,OAAO,CAAC;AAAEW,YAAAA,SAAS,EAAER;AAAb,WAAD,CAAP;AACD;AALH;AAAA;AAAA;AAAA;AAAA,cAjCA,EAwCCA,IAAI,CAACE,IAxCN,EAyCCF,IAAI,CAACG,QAzCN,EA0CCH,IAAI,CAACI,QA1CN,EA2CCL,OAAO,gBAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAAH,gBAAoB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cA3C5B,EA4CCD,IAAI,GAAI,GAAEA,IAAI,CAACD,OAAL,CAAaY,QAAS,GAA5B,GAAiC,EA5CtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAF,mBADF;AAkDD;;GArDuBb,G;UACeF,W;;;KADfE,G","sourcesContent":["import { React, useState } from \"react\";\nimport { gql, useMutation } from \"@apollo/client\";\n\nconst ADD_USER = gql`\n  mutation($name: String!, $username: String!, $password: String!) {\n    addUser(name: $name, username: $username, password: $password) {\n      response\n    }\n  }\n`;\n\nexport default function Mut() {\n  const [addUser, { data, loading }] = useMutation(ADD_USER);\n  const [user, setUser] = useState({ name: \"\", username: \"\", password: \"\" });\n  return (\n    <><div lassName=\"Container\">      <input\n        type=\"text\"\n        onChange={(e) =>\n          setUser({\n            name: e.target.value,\n            username: user.username,\n            password: user.password,\n          })\n        }\n        placeholder=\"Name\"\n      ></input>\n      <input\n        type=\"text\"\n        onChange={(e) => {\n          setUser({\n            name: user.name,\n            username: e.target.value,\n            password: user.password,\n          });\n        }}\n        placeholder=\"Username\"\n      ></input>\n      <input\n        type=\"password\"\n        onChange={(e) => {\n          setUser({\n            name: user.name,\n            username: user.username,\n            password: e.target.value,\n          });\n        }}\n        placeholder=\"Password\"\n      ></input>\n      <input\n        type=\"button\"\n        value=\"Submit\"\n        onClick={() => {\n          addUser({ variables: user });\n        }}\n      ></input>\n      {user.name}\n      {user.username}\n      {user.password}\n      {loading ? <p>loading</p> : <p>done</p>}\n      {data ? `${data.addUser.response}\"` : \"\"}\n      </div>\n\n    </>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}