{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/danielpiga/Desktop/Apollo2 copy/ApolloReact/apolloclient/src/route/Dato.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { gql, useMutation, useQuery, useLazyQuery } from \"@apollo/client\";\nexport default function Home() {\n  _s();\n\n  //const [createRender, setcreaterender] = useState(<CreateRender id=\"101\" />);\n  const [inputsUser, setinputsUser] = useState({\n    id: \"36\",\n    name: \"\",\n    description: \"\",\n    extraInfo: \"\",\n    child: []\n  });\n  const [renderQuery, setrenderQuery] = useState();\n  const [renderDataLoading, setrenderDataLoading] = useState( /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false));\n  if (renderDataLoading) getFields({\n    variables: {\n      id: inputsUser.id\n    }\n  });\n  const DATO = gql`\n    query dato($id: String) {\n      dato(id: $id) {\n        name\n        info\n        Description\n      }\n    }\n  `;\n  const [getFields, {\n    loading,\n    data\n  }] = useLazyQuery(DATO);\n  useEffect(() => {\n    if (loading) {\n      setrenderDataLoading( /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"loading\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 32,\n          columnNumber: 11\n        }, this)\n      }, void 0, false));\n    } else {\n      setrenderDataLoading( /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false));\n    }\n\n    if (data) {\n      console.log(data.dato);\n      setrenderDataLoading( /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Name:\", data.dato.name]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Info:\", data.dato.info]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Description:\", data.dato.Description]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 9\n      }, this));\n    }\n  }, [loading, data]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        onChange: e => setinputsUser({ ...inputsUser,\n          name: e.target.value\n        }),\n        placeholder: \"Name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        onChange: e => setinputsUser({ ...inputsUser,\n          description: e.target.value\n        }),\n        placeholder: \"Descriptio\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        onChange: e => setinputsUser({ ...inputsUser,\n          extraInfo: e.target.value\n        }),\n        placeholder: \"ExtraInfo\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"button\",\n      onClick: () => getFields({\n        variables: {\n          id: inputsUser.id\n        }\n      }),\n      value: \"submit\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"button\",\n      onClick: () => console.log(data),\n      value: \"submitt\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }, this), renderDataLoading, renderQuery]\n  }, void 0, true);\n} //   useEffect(() => {\n//    function ReqQuery(nameRequest){\n//     const DATO=gql`\n//     query dato($name:String){dato(name:$name){name}\n//     }`;\n// //if(nameRequest.name){console.log(nameRequest)\n//      const { loading, error, data } = useQuery(DATO, {variables:  nameRequest.name});\n//   if(data)console.log(data)\n// return(<>ciao</>)\n// }\n// }, [renderQuery])\n//    if (data){console.log(data)}\n//  }\n//  if (loading) return <p>Loading...</p>;\n// if (error) return <p>Error :(</p>;\n//return  data.ciao.map((res)=><p key={res.id}>nome:{res.nome} cognome:{res.cognome}</p>)\n//const [dataInput, { data, loading }] = useMutation(DATA_INPUT);\n// const DATA_INPUT = gql`\n// mutation($username: String!, $password: String!, ) {\n//   loginUser(  username: $username, password:$password) {\n//     id,\n//     username,\n//     status\n//   }\n// }\n// `;\n// const dat = [\n//   { id: 1, name: \"javascript\", moreData: \"more info\", children: [101, 102] },\n//   { id: 101, name: \"Array\", moreData: \"aaarraaayy\", children: [103, 104] },\n//   { id: 102, name: \"Object\", moreData: \"ooobbbjjject\", children: [105, 106] },\n//   {\n//     id: 103,\n//     name: \"Arrayspec1\",\n//     moreData: \"aaarraaayy\",\n//     children: [107, 108],\n//   },\n//   {\n//     id: 104,\n//     name: \"Arrayspec2\",\n//     moreData: \"ooobbbjjject\",\n//     children: [101, 102],\n//   },\n//   {\n//     id: 105,\n//     name: \"objectspec1\",\n//     moreData: \"aaarraaayy\",\n//     children: [101, 102],\n//   },\n//   {\n//     id: 106,\n//     name: \"Objectspec2\",\n//     moreData: \"ooobbbjjject\",\n//     children: [101, 102],\n//   },\n//   {\n//     id: 107,\n//     name: \"Objectspec3\",\n//     moreData: \"ooobbbjjject\",\n//     children: [101, 102],\n//   },\n//   {\n//     id: 108,\n//     name: \"Objectspec4\",\n//     moreData: \"ooobbbjjject\",\n//     children: [101, 102],\n//   },\n// ];\n// function buttonNameFromArray(id) {\n//   let obj = dat.find((s) => s.id === id);\n//   console.log(obj, \"objbutton\");\n//   return (\n//     <input\n//       type=\"button\"\n//       value={obj.name}\n//       key={obj.id}\n//       onClick={() => setcreaterender(<CreateRender id={obj.id} />)}\n//     ></input>\n//   );\n// }\n// function CreateRender(props) {\n//   console.log(props.id, \"propsid\");\n//   let obj = dat.findIndex((x) => x.id === parseInt(props.id));\n//   console.log(obj, \"obj\");\n//   return (\n//     <>\n//       <div>\n//         nome madre:{dat[obj].name} figli:\n//         {dat[obj].children.map((id) => buttonNameFromArray(id))}\n//       </div>\n//     </>\n//   );\n// }\n\n_s(Home, \"s/uZ/m04oPUI9ME7nF4o0WAV8oE=\", false, function () {\n  return [useLazyQuery];\n});\n\n_c = Home;\n\nvar _c;\n\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"sources":["/Users/danielpiga/Desktop/Apollo2 copy/ApolloReact/apolloclient/src/route/Dato.js"],"names":["React","useState","useEffect","gql","useMutation","useQuery","useLazyQuery","Home","inputsUser","setinputsUser","id","name","description","extraInfo","child","renderQuery","setrenderQuery","renderDataLoading","setrenderDataLoading","getFields","variables","DATO","loading","data","console","log","dato","info","Description","e","target","value"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { gql, useMutation, useQuery, useLazyQuery } from \"@apollo/client\";\nexport default function Home() {\n  //const [createRender, setcreaterender] = useState(<CreateRender id=\"101\" />);\n  const [inputsUser, setinputsUser] = useState({\n    id: \"36\",\n    name: \"\",\n    description: \"\",\n    extraInfo: \"\",\n    child: [],\n  });\n  const [renderQuery, setrenderQuery] = useState();\n  const [renderDataLoading, setrenderDataLoading] = useState(<></>);\n  if(renderDataLoading)getFields({ variables: { id: inputsUser.id } })\n\n  const DATO = gql`\n    query dato($id: String) {\n      dato(id: $id) {\n        name\n        info\n        Description\n      }\n    }\n  `;\n  const [getFields, { loading, data }] = useLazyQuery(DATO);\n\n  useEffect(() => {\n   \n    if (loading) {\n      setrenderDataLoading(\n        <>\n          <p>loading</p>\n        </>\n      );\n    } else {\n      setrenderDataLoading(<></>);\n    }\n   \n    if (data) {\n      console.log(data.dato);\n      setrenderDataLoading(\n        <div>\n          <p>Name:{data.dato.name}</p>\n          <p>Info:{data.dato.info}</p>\n          <p>Description:{data.dato.Description}</p>\n        </div>\n      );\n    }\n  }, [loading, data]);\n\n  return (\n    <>\n      <div>\n        <input\n          type=\"text\"\n          onChange={(e) =>\n            setinputsUser({ ...inputsUser, name: e.target.value })\n          }\n          placeholder=\"Name\"\n        ></input>\n        <input\n          type=\"text\"\n          onChange={(e) =>\n            setinputsUser({ ...inputsUser, description: e.target.value })\n          }\n          placeholder=\"Descriptio\"\n        ></input>\n        <input\n          type=\"text\"\n          onChange={(e) =>\n            setinputsUser({ ...inputsUser, extraInfo: e.target.value })\n          }\n          placeholder=\"ExtraInfo\"\n        ></input>\n      </div>\n      <input\n        type=\"button\"\n        onClick={() => getFields({ variables: { id: inputsUser.id } })}\n        value=\"submit\"\n      ></input>\n\n      <input\n        type=\"button\"\n        onClick={() => console.log(data)}\n        value=\"submitt\"\n      ></input>\n      {renderDataLoading}\n      {renderQuery}\n    </>\n  );\n}\n//   useEffect(() => {\n\n//    function ReqQuery(nameRequest){\n//     const DATO=gql`\n\n//     query dato($name:String){dato(name:$name){name}\n//     }`;\n// //if(nameRequest.name){console.log(nameRequest)\n//      const { loading, error, data } = useQuery(DATO, {variables:  nameRequest.name});\n//   if(data)console.log(data)\n\n// return(<>ciao</>)\n// }\n// }, [renderQuery])\n//    if (data){console.log(data)}\n//  }\n//  if (loading) return <p>Loading...</p>;\n// if (error) return <p>Error :(</p>;\n//return  data.ciao.map((res)=><p key={res.id}>nome:{res.nome} cognome:{res.cognome}</p>)\n\n//const [dataInput, { data, loading }] = useMutation(DATA_INPUT);\n\n// const DATA_INPUT = gql`\n// mutation($username: String!, $password: String!, ) {\n//   loginUser(  username: $username, password:$password) {\n//     id,\n//     username,\n//     status\n//   }\n// }\n// `;\n// const dat = [\n//   { id: 1, name: \"javascript\", moreData: \"more info\", children: [101, 102] },\n//   { id: 101, name: \"Array\", moreData: \"aaarraaayy\", children: [103, 104] },\n//   { id: 102, name: \"Object\", moreData: \"ooobbbjjject\", children: [105, 106] },\n\n//   {\n//     id: 103,\n//     name: \"Arrayspec1\",\n//     moreData: \"aaarraaayy\",\n//     children: [107, 108],\n//   },\n//   {\n//     id: 104,\n//     name: \"Arrayspec2\",\n//     moreData: \"ooobbbjjject\",\n//     children: [101, 102],\n//   },\n\n//   {\n//     id: 105,\n//     name: \"objectspec1\",\n//     moreData: \"aaarraaayy\",\n//     children: [101, 102],\n//   },\n//   {\n//     id: 106,\n//     name: \"Objectspec2\",\n//     moreData: \"ooobbbjjject\",\n//     children: [101, 102],\n//   },\n//   {\n//     id: 107,\n//     name: \"Objectspec3\",\n//     moreData: \"ooobbbjjject\",\n//     children: [101, 102],\n//   },\n//   {\n//     id: 108,\n//     name: \"Objectspec4\",\n//     moreData: \"ooobbbjjject\",\n//     children: [101, 102],\n//   },\n// ];\n// function buttonNameFromArray(id) {\n//   let obj = dat.find((s) => s.id === id);\n//   console.log(obj, \"objbutton\");\n//   return (\n//     <input\n//       type=\"button\"\n//       value={obj.name}\n//       key={obj.id}\n//       onClick={() => setcreaterender(<CreateRender id={obj.id} />)}\n//     ></input>\n//   );\n// }\n// function CreateRender(props) {\n//   console.log(props.id, \"propsid\");\n//   let obj = dat.findIndex((x) => x.id === parseInt(props.id));\n//   console.log(obj, \"obj\");\n//   return (\n//     <>\n//       <div>\n//         nome madre:{dat[obj].name} figli:\n//         {dat[obj].children.map((id) => buttonNameFromArray(id))}\n//       </div>\n//     </>\n//   );\n// }\n"]},"metadata":{},"sourceType":"module"}