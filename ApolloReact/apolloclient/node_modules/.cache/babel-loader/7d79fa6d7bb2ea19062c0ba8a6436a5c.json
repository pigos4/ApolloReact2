{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useMemo } from \"react\";\nimport { gql, useMutation, useLazyQuery } from \"@apollo/client\";\nexport default function Dato() {\n  _s();\n\n  const [idToRender, setidTorender] = useState(\"36\");\n\n  function IdToRender() {\n    return;\n  }\n} //   const [idToRender, setidTorender] = useState(\"36\");\n//   const [functionToRender, setfunctionToRender] = useState(\"\");\n//   function RenderChild(props) {\n//     console.log(props.child, \"propsrender child\");\n//     useEffect(() => {\n//       return props.child.map((x, index) => (\n//         <>\n//           <input type=\"button\" key={index} value={x.Name} onClick={()=>setidTorender(x.ID)}></input>\n//           <br></br>\n//         </>\n//       ));\n//     }, [props.child])\n//   }\n//   function Funct(prop) {\n//     console.log(prop, \"prop\");\n//     const MemoRenderChild = useMemo(()=> RenderChild(prop.data.dato.child),[prop]);\n//     return (\n//       <>\n//         <div>\n//           <p>Name:{prop.data.dato.name}</p>\n//           <p>Description:{prop.data.dato.Description}</p>\n//           <p>Info:{prop.data.dato.info}</p>\n//           <p>father{prop.data.dato.father}</p>\n//         </div>\n//         <MemoRenderChild />\n//       </>\n//     );\n//   }\n//   function FunctionIdToRender() {\n//     const DATO = gql`\n//       query dato($id: String) {\n//         dato(id: $id) {\n//           name\n//           info\n//           Description\n//           father\n//           child {\n//             ID\n//             Name\n//           }\n//         }\n//       }\n//     `;\n//     const [getFields, { loading, data }] = useLazyQuery(DATO);\n//     useEffect(() => {\n//       getFields({ variables: { id: idToRender } })\n//       if (data) {\n//         console.log(data);\n//         setfunctionToRender(<Funct data={data} />);\n//       }\n//     }, [data,getFields]);\n//     return (\n//       <input\n//         type=\"button\"\n//         onClick={() => getFields({ variables: { id: idToRender } })}\n//         value=\"Javascript\"\n//       ></input>\n//     );\n//   }\n//   return (\n//     <>\n//       <div>\n//         {functionToRender}\n//         <FunctionIdToRender />\n//       </div>\n//     </>\n//   );\n// }\n\n_s(Dato, \"sFSm5nZrMA+LwOix3HyKFQtzccw=\");\n\n_c = Dato;\n\nvar _c;\n\n$RefreshReg$(_c, \"Dato\");","map":{"version":3,"sources":["/Users/danielpiga/Desktop/apollo2copia/ApolloReact2/ApolloReact/apolloclient/src/route/Dato.js"],"names":["React","useState","useEffect","useMemo","gql","useMutation","useLazyQuery","Dato","idToRender","setidTorender","IdToRender"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,EAAoCC,OAApC,QAAmD,OAAnD;AACA,SAASC,GAAT,EAAcC,WAAd,EAA2BC,YAA3B,QAA+C,gBAA/C;AAEA,eAAe,SAASC,IAAT,GAAgB;AAAA;;AAC7B,QAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BR,QAAQ,CAAC,IAAD,CAA5C;;AAGA,WAASS,UAAT,GAAqB;AAInB;AACD;AAUF,C,CAuBD;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;GAjHwBH,I;;KAAAA,I","sourcesContent":["import React, { useState, useEffect,useMemo } from \"react\";\nimport { gql, useMutation, useLazyQuery } from \"@apollo/client\";\n\nexport default function Dato() {\n  const [idToRender, setidTorender] = useState(\"36\");\n\n\n  function IdToRender(){\n\n\n\n    return \n  }\n\n\n\n\n\n\n\n\n\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n//   const [idToRender, setidTorender] = useState(\"36\");\n//   const [functionToRender, setfunctionToRender] = useState(\"\");\n\n//   function RenderChild(props) {\n//     console.log(props.child, \"propsrender child\");\n//     useEffect(() => {\n//       return props.child.map((x, index) => (\n//         <>\n//           <input type=\"button\" key={index} value={x.Name} onClick={()=>setidTorender(x.ID)}></input>\n//           <br></br>\n//         </>\n//       ));\n//     }, [props.child])\n    \n//   }\n\n//   function Funct(prop) {\n//     console.log(prop, \"prop\");\n//     const MemoRenderChild = useMemo(()=> RenderChild(prop.data.dato.child),[prop]);\n//     return (\n//       <>\n//         <div>\n//           <p>Name:{prop.data.dato.name}</p>\n//           <p>Description:{prop.data.dato.Description}</p>\n//           <p>Info:{prop.data.dato.info}</p>\n//           <p>father{prop.data.dato.father}</p>\n//         </div>\n//         <MemoRenderChild />\n//       </>\n//     );\n//   }\n//   function FunctionIdToRender() {\n//     const DATO = gql`\n//       query dato($id: String) {\n//         dato(id: $id) {\n//           name\n//           info\n//           Description\n//           father\n//           child {\n//             ID\n//             Name\n//           }\n//         }\n//       }\n//     `;\n\n//     const [getFields, { loading, data }] = useLazyQuery(DATO);\n//     useEffect(() => {\n//       getFields({ variables: { id: idToRender } })\n//       if (data) {\n//         console.log(data);\n//         setfunctionToRender(<Funct data={data} />);\n//       }\n//     }, [data,getFields]);\n//     return (\n//       <input\n//         type=\"button\"\n//         onClick={() => getFields({ variables: { id: idToRender } })}\n//         value=\"Javascript\"\n//       ></input>\n//     );\n//   }\n//   return (\n//     <>\n//       <div>\n//         {functionToRender}\n//         <FunctionIdToRender />\n//       </div>\n//     </>\n//   );\n// }\n"]},"metadata":{},"sourceType":"module"}