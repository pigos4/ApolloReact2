{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/danielpiga/Desktop/Apollo2 copy/ApolloReact/apolloclient/src/route/Crypto.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { gql, useLazyQuery } from \"@apollo/client\";\nimport \"../App.css\";\nexport default function CRYPTO() {\n  _s();\n\n  const [result, setresult] = useState({\n    name: \"\",\n    value: []\n  });\n  const [callQuery, setcallQuery] = useState(false);\n\n  function RenderResults() {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: result.name !== \"\" ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"valueCrypto\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Name: \", result.name, \" \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 13,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \" Value:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 15,\n          columnNumber: 13\n        }, this), result.value.map((data, index) => /*#__PURE__*/_jsxDEV(\"p\", {\n          children: data\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 17,\n          columnNumber: 15\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 12,\n        columnNumber: 11\n      }, this) : \"\"\n    }, void 0, false);\n  }\n\n  const CRYPTO = gql`\n    query crypto($symb: String) {\n      crypto(symb: $symb) {\n        name\n        value\n      }\n    }\n  `;\n  const [getFields, {\n    loading,\n    data\n  }] = useLazyQuery(CRYPTO);\n  const [inputsUser, setinputsUser] = useState({\n    symbol: undefined\n  });\n  useEffect(() => {\n    if (data) {\n      setresult({\n        name: data.crypto.name,\n        value: [data.crypto.value]\n      });\n    }\n  }, [data, callQuery]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"cryptoContainer\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"smallContainer\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"Insert the simbol of the crypto to see the price in real time.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          onChange: e => setinputsUser({\n            symbol: e.target.value\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"submit\",\n          onClick: () => {\n            setcallQuery(true);\n            getFields({\n              variables: {\n                symb: inputsUser.symbol\n              }\n            });\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(RenderResults, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 11\n        }, this), loading ? /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"loading\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 22\n        }, this) : \"\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n}\n\n_s(CRYPTO, \"ZY4EHxZMuMePVbJ7NA4abT27lzo=\", false, function () {\n  return [useLazyQuery];\n});\n\n_c = CRYPTO;\n\nvar _c;\n\n$RefreshReg$(_c, \"CRYPTO\");","map":{"version":3,"sources":["/Users/danielpiga/Desktop/Apollo2 copy/ApolloReact/apolloclient/src/route/Crypto.js"],"names":["React","useState","useEffect","gql","useLazyQuery","CRYPTO","result","setresult","name","value","callQuery","setcallQuery","RenderResults","map","data","index","getFields","loading","inputsUser","setinputsUser","symbol","undefined","crypto","e","target","variables","symb"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,GAAT,EAAcC,YAAd,QAAkC,gBAAlC;AACA,OAAO,YAAP;AAEA,eAAe,SAASC,MAAT,GAAkB;AAAA;;AAC/B,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBN,QAAQ,CAAC;AAAEO,IAAAA,IAAI,EAAE,EAAR;AAAYC,IAAAA,KAAK,EAAE;AAAnB,GAAD,CAApC;AACA,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BV,QAAQ,CAAC,KAAD,CAA1C;;AACA,WAASW,aAAT,GAAyB;AACvB,wBACE;AAAA,gBACGN,MAAM,CAACE,IAAP,KAAgB,EAAhB,gBACC;AAAK,QAAA,SAAS,EAAC,aAAf;AAAA,gCACE;AAAA,+BAAUF,MAAM,CAACE,IAAjB;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,eAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAHF,EAIGF,MAAM,CAACG,KAAP,CAAaI,GAAb,CAAiB,CAACC,IAAD,EAAOC,KAAP,kBAChB;AAAA,oBAAgBD;AAAhB,WAAQC,KAAR;AAAA;AAAA;AAAA;AAAA,gBADD,CAJH;AAAA;AAAA;AAAA;AAAA;AAAA,cADD,GAUC;AAXJ,qBADF;AAgBD;;AAED,QAAMV,MAAM,GAAGF,GAAI;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,GAPE;AAQA,QAAM,CAACa,SAAD,EAAY;AAAEC,IAAAA,OAAF;AAAWH,IAAAA;AAAX,GAAZ,IAAiCV,YAAY,CAACC,MAAD,CAAnD;AACA,QAAM,CAACa,UAAD,EAAaC,aAAb,IAA8BlB,QAAQ,CAAC;AAC3CmB,IAAAA,MAAM,EAAEC;AADmC,GAAD,CAA5C;AAGAnB,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIY,IAAJ,EAAU;AACRP,MAAAA,SAAS,CAAC;AAAEC,QAAAA,IAAI,EAAEM,IAAI,CAACQ,MAAL,CAAYd,IAApB;AAA0BC,QAAAA,KAAK,EAAE,CAACK,IAAI,CAACQ,MAAL,CAAYb,KAAb;AAAjC,OAAD,CAAT;AACD;AACF,GAJQ,EAIN,CAACK,IAAD,EAAOJ,SAAP,CAJM,CAAT;AAMA,sBACE;AAAA,2BACE;AAAK,MAAA,SAAS,EAAC,iBAAf;AAAA,6BACE;AAAK,QAAA,SAAS,EAAC,gBAAf;AAAA,gCACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,eAIE;AAAA;AAAA;AAAA;AAAA,gBAJF,eAKE;AACE,UAAA,IAAI,EAAC,MADP;AAEE,UAAA,QAAQ,EAAGa,CAAD,IAAOJ,aAAa,CAAC;AAAEC,YAAAA,MAAM,EAAEG,CAAC,CAACC,MAAF,CAASf;AAAnB,WAAD;AAFhC;AAAA;AAAA;AAAA;AAAA,gBALF,eASE;AACE,UAAA,IAAI,EAAC,QADP;AAEE,UAAA,OAAO,EAAE,MAAM;AACbE,YAAAA,YAAY,CAAC,IAAD,CAAZ;AACAK,YAAAA,SAAS,CAAC;AAAES,cAAAA,SAAS,EAAE;AAAEC,gBAAAA,IAAI,EAAER,UAAU,CAACE;AAAnB;AAAb,aAAD,CAAT;AACD;AALH;AAAA;AAAA;AAAA;AAAA,gBATF,eAgBE,QAAC,aAAD;AAAA;AAAA;AAAA;AAAA,gBAhBF,EAiBGH,OAAO,gBAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAAH,GAAoB,EAjB9B;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF,mBADF;AAyBD;;GAjEuBZ,M;UA8BiBD,Y;;;KA9BjBC,M","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { gql, useLazyQuery } from \"@apollo/client\";\nimport \"../App.css\";\n\nexport default function CRYPTO() {\n  const [result, setresult] = useState({ name: \"\", value: [] });\n  const [callQuery, setcallQuery] = useState(false);\n  function RenderResults() {\n    return (\n      <>\n        {result.name !== \"\" ? (\n          <div className=\"valueCrypto\">\n            <p>Name: {result.name} </p>\n\n            <p> Value:</p>\n            {result.value.map((data, index) => (\n              <p key={index}>{data}</p>\n            ))}\n          </div>\n        ) : (\n          \"\"\n        )}\n      </>\n    );\n  }\n\n  const CRYPTO = gql`\n    query crypto($symb: String) {\n      crypto(symb: $symb) {\n        name\n        value\n      }\n    }\n  `;\n  const [getFields, { loading, data }] = useLazyQuery(CRYPTO);\n  const [inputsUser, setinputsUser] = useState({\n    symbol: undefined,\n  });\n  useEffect(() => {\n    if (data) {\n      setresult({ name: data.crypto.name, value: [data.crypto.value] });\n    }\n  }, [data, callQuery]);\n\n  return (\n    <>\n      <div className=\"cryptoContainer\">\n        <div className=\"smallContainer\">\n          <h1>\n            Insert the simbol of the crypto to see the price in real time.\n          </h1>\n          <br />\n          <input\n            type=\"text\"\n            onChange={(e) => setinputsUser({ symbol: e.target.value })}\n          ></input>\n          <input\n            type=\"submit\"\n            onClick={() => {\n              setcallQuery(true);\n              getFields({ variables: { symb: inputsUser.symbol } });\n            }}\n          ></input>\n          <RenderResults />\n          {loading ? <p>loading</p> : \"\"}\n        </div>\n      </div>\n    </>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}