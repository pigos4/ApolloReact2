{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/danielpiga/Desktop/apolloreact/apolloclient/src/graphql/mutation/Signup.js\",\n    _s = $RefreshSig$();\n\nimport { React, useState } from \"react\";\nimport { gql, useMutation } from \"@apollo/client\";\nconst ADD_USER = gql`\n  mutation($name: String!, $username: String!, $password: String!) {\n    addUser(name: $name, username: $username, password: $password) {\n      id\n      name\n      username\n      \n    }\n  }\n`;\nexport default function Mut() {\n  _s();\n\n  const [addUser, {\n    data,\n    loading\n  }] = useMutation(ADD_USER);\n  const [user, setUser] = useState({\n    name: \"\",\n    username: \"\",\n    password: \"\"\n  });\n  console.log(user);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      onChange: e => setUser(e.target.value),\n      placeholder: \"nome\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      onChange: e => {\n        setUser();\n      },\n      placeholder: \"username\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"password\",\n      onChange: e => {\n        setUser();\n      },\n      placeholder: \"password\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"button\",\n      value: \"submit\",\n      onClick: () => {\n        addUser({\n          variables: {\n            name: \"daniel\",\n            username: \"pigos\",\n            password: \"pss\"\n          }\n        });\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"button\",\n      onClick: () => console.log(data.addUser, \"data\", loading, \"x\"),\n      value: \"consolelog\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this), loading ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"loading\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 18\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"done\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 35\n    }, this)]\n  }, void 0, true);\n}\n\n_s(Mut, \"8DwAX8eERQxVm2ac2MwsnvCrhjo=\", false, function () {\n  return [useMutation];\n});\n\n_c = Mut;\n\nvar _c;\n\n$RefreshReg$(_c, \"Mut\");","map":{"version":3,"sources":["/Users/danielpiga/Desktop/apolloreact/apolloclient/src/graphql/mutation/Signup.js"],"names":["React","useState","gql","useMutation","ADD_USER","Mut","addUser","data","loading","user","setUser","name","username","password","console","log","e","target","value","variables"],"mappings":";;;;;;AAAA,SAASA,KAAT,EAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,GAAT,EAAcC,WAAd,QAAiC,gBAAjC;AAEA,MAAMC,QAAQ,GAAGF,GAAI;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CATA;AAWA,eAAe,SAASG,GAAT,GAAe;AAAA;;AAC5B,QAAM,CAACC,OAAD,EAAU;AAAEC,IAAAA,IAAF;AAAQC,IAAAA;AAAR,GAAV,IAA+BL,WAAW,CAACC,QAAD,CAAhD;AACA,QAAM,CAACK,IAAD,EAAOC,OAAP,IAAkBT,QAAQ,CAAC;AAACU,IAAAA,IAAI,EAAE,EAAP;AACjCC,IAAAA,QAAQ,EAAE,EADuB;AAEjCC,IAAAA,QAAQ,EAAE;AAFuB,GAAD,CAAhC;AAGFC,EAAAA,OAAO,CAACC,GAAR,CAAYN,IAAZ;AACE,sBACE;AAAA,4BACE;AAAO,MAAA,IAAI,EAAC,MAAZ;AAAmB,MAAA,QAAQ,EAAGO,CAAD,IAAON,OAAO,CAACM,CAAC,CAACC,MAAF,CAASC,KAAV,CAA3C;AAA4D,MAAA,WAAW,EAAC;AAAxE;AAAA;AAAA;AAAA;AAAA,YADF,eAEE;AAAO,MAAA,IAAI,EAAC,MAAZ;AAAmB,MAAA,QAAQ,EAAGF,CAAD,IAAK;AAACN,QAAAA,OAAO;AAAG,OAA7C;AAA8C,MAAA,WAAW,EAAC;AAA1D;AAAA;AAAA;AAAA;AAAA,YAFF,eAGE;AAAO,MAAA,IAAI,EAAC,UAAZ;AAAuB,MAAA,QAAQ,EAAGM,CAAD,IAAK;AAACN,QAAAA,OAAO;AAAG,OAAjD;AAAmD,MAAA,WAAW,EAAC;AAA/D;AAAA;AAAA;AAAA;AAAA,YAHF,eAIE;AAAO,MAAA,IAAI,EAAC,QAAZ;AAEE,MAAA,KAAK,EAAC,QAFR;AAGE,MAAA,OAAO,EAAE,MAAM;AACbJ,QAAAA,OAAO,CAAC;AACNa,UAAAA,SAAS,EAAE;AAETR,YAAAA,IAAI,EAAE,QAFG;AAGTC,YAAAA,QAAQ,EAAE,OAHD;AAITC,YAAAA,QAAQ,EAAE;AAJD;AADL,SAAD,CAAP;AAQD;AAZH;AAAA;AAAA;AAAA;AAAA,YAJF,eAmBE;AACE,MAAA,IAAI,EAAC,QADP;AAEE,MAAA,OAAO,EAAE,MAAMC,OAAO,CAACC,GAAR,CAAYR,IAAI,CAACD,OAAjB,EAA0B,MAA1B,EAAkCE,OAAlC,EAA2C,GAA3C,CAFjB;AAEkE,MAAA,KAAK,EAAC;AAFxE;AAAA;AAAA;AAAA;AAAA,YAnBF,EAuBGA,OAAO,gBAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAH,gBAAoB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAvB9B;AAAA,kBADF;AA2BD;;GAjCuBH,G;UACeF,W;;;KADfE,G","sourcesContent":["import { React, useState } from \"react\";\nimport { gql, useMutation } from \"@apollo/client\";\n\nconst ADD_USER = gql`\n  mutation($name: String!, $username: String!, $password: String!) {\n    addUser(name: $name, username: $username, password: $password) {\n      id\n      name\n      username\n      \n    }\n  }\n`;\n\nexport default function Mut() {\n  const [addUser, { data, loading }] = useMutation(ADD_USER);\n  const [user, setUser] = useState({name: \"\",\n  username: \"\",\n  password: \"\",});\nconsole.log(user)\n  return (\n    <>\n      <input type=\"text\" onChange={(e) => setUser(e.target.value)}placeholder=\"nome\"></input>\n      <input type=\"text\" onChange={(e)=>{setUser()}}placeholder=\"username\"></input>\n      <input type=\"password\" onChange={(e)=>{setUser()}} placeholder=\"password\"></input>\n      <input type=\"button\"\n        \n        value=\"submit\"\n        onClick={() => {\n          addUser({\n            variables: {\n              \n              name: \"daniel\",\n              username: \"pigos\",\n              password: \"pss\",\n            },\n          });\n        }}\n      ></input>\n      \n      <input\n        type=\"button\"\n        onClick={() => console.log(data.addUser, \"data\", loading, \"x\")} value=\"consolelog\"\n      ></input>\n      {loading ? <p>loading</p> : <p>done</p>}\n    </>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}