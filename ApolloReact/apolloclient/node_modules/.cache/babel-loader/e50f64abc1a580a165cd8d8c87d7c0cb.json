{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/danielpiga/Desktop/apollo2copia/ApolloReact2/ApolloReact/apolloclient/src/route/Dato/Dato.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\n\nconst IdToRender = require('./DatoIdToRender').default;\n\nexport default function Dato() {\n  _s();\n\n  const [functionToRender, setfunctionToRender] = useState(\"\");\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(IdToRender, {\n      id: idToRender\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n} //   const [idToRender, setidTorender] = useState(\"36\");\n//   const [functionToRender, setfunctionToRender] = useState(\"\");\n//   function RenderChild(props) {\n//     console.log(props.child, \"propsrender child\");\n//     useEffect(() => {\n//       return props.child.map((x, index) => (\n//         <>\n//           <input type=\"button\" key={index} value={x.Name} onClick={()=>setidTorender(x.ID)}></input>\n//           <br></br>\n//         </>\n//       ));\n//     }, [props.child])\n//   }\n//   function Funct(prop) {\n//     console.log(prop, \"prop\");\n//     const MemoRenderChild = useMemo(()=> RenderChild(prop.data.dato.child),[prop]);\n//     return (\n//       <>\n//         <div>\n//           <p>Name:{prop.data.dato.name}</p>\n//           <p>Description:{prop.data.dato.Description}</p>\n//           <p>Info:{prop.data.dato.info}</p>\n//           <p>father{prop.data.dato.father}</p>\n//         </div>\n//         <MemoRenderChild />\n//       </>\n//     );\n//   }\n//   function FunctionIdToRender() {\n//     const DATO = gql`\n//       query dato($id: String) {\n//         dato(id: $id) {\n//           name\n//           info\n//           Description\n//           father\n//           child {\n//             ID\n//             Name\n//           }\n//         }\n//       }\n//     `;\n//     const [getFields, { loading, data }] = useLazyQuery(DATO);\n//     useEffect(() => {\n//       getFields({ variables: { id: idToRender } })\n//       if (data) {\n//         console.log(data);\n//         setfunctionToRender(<Funct data={data} />);\n//       }\n//     }, [data,getFields]);\n//     return (\n//       <input\n//         type=\"button\"\n//         onClick={() => getFields({ variables: { id: idToRender } })}\n//         value=\"Javascript\"\n//       ></input>\n//     );\n//   }\n//   return (\n//     <>\n//       <div>\n//         {functionToRender}\n//         <FunctionIdToRender />\n//       </div>\n//     </>\n//   );\n// }\n\n_s(Dato, \"H0nOZfqGlYDKkcNfafGkWiUb/Aw=\");\n\n_c = Dato;\n\nvar _c;\n\n$RefreshReg$(_c, \"Dato\");","map":{"version":3,"sources":["/Users/danielpiga/Desktop/apollo2copia/ApolloReact2/ApolloReact/apolloclient/src/route/Dato/Dato.js"],"names":["React","useState","useEffect","IdToRender","require","default","Dato","functionToRender","setfunctionToRender","idToRender"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;;AACA,MAAMC,UAAU,GAAGC,OAAO,CAAC,kBAAD,CAAP,CAA4BC,OAA/C;;AAEA,eAAe,SAASC,IAAT,GAAgB;AAAA;;AAE7B,QAAM,CAACC,gBAAD,EAAmBC,mBAAnB,IAA0CP,QAAQ,CAAC,EAAD,CAAxD;AAEA,sBACE;AAAA,2BACE,QAAC,UAAD;AAAY,MAAA,EAAE,EAAEQ;AAAhB;AAAA;AAAA;AAAA;AAAA;AADF,mBADF;AAKD,C,CAED;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;GAlFwBH,I;;KAAAA,I","sourcesContent":["import React, { useState, useEffect } from \"react\";\nconst IdToRender = require('./DatoIdToRender').default;\n\nexport default function Dato() {\n\n  const [functionToRender, setfunctionToRender] = useState(\"\");\n\n  return (\n    <>\n      <IdToRender id={idToRender}/>\n    </>\n  );\n}\n\n//   const [idToRender, setidTorender] = useState(\"36\");\n//   const [functionToRender, setfunctionToRender] = useState(\"\");\n\n//   function RenderChild(props) {\n//     console.log(props.child, \"propsrender child\");\n//     useEffect(() => {\n//       return props.child.map((x, index) => (\n//         <>\n//           <input type=\"button\" key={index} value={x.Name} onClick={()=>setidTorender(x.ID)}></input>\n//           <br></br>\n//         </>\n//       ));\n//     }, [props.child])\n\n//   }\n\n//   function Funct(prop) {\n//     console.log(prop, \"prop\");\n//     const MemoRenderChild = useMemo(()=> RenderChild(prop.data.dato.child),[prop]);\n//     return (\n//       <>\n//         <div>\n//           <p>Name:{prop.data.dato.name}</p>\n//           <p>Description:{prop.data.dato.Description}</p>\n//           <p>Info:{prop.data.dato.info}</p>\n//           <p>father{prop.data.dato.father}</p>\n//         </div>\n//         <MemoRenderChild />\n//       </>\n//     );\n//   }\n//   function FunctionIdToRender() {\n//     const DATO = gql`\n//       query dato($id: String) {\n//         dato(id: $id) {\n//           name\n//           info\n//           Description\n//           father\n//           child {\n//             ID\n//             Name\n//           }\n//         }\n//       }\n//     `;\n\n//     const [getFields, { loading, data }] = useLazyQuery(DATO);\n//     useEffect(() => {\n//       getFields({ variables: { id: idToRender } })\n//       if (data) {\n//         console.log(data);\n//         setfunctionToRender(<Funct data={data} />);\n//       }\n//     }, [data,getFields]);\n//     return (\n//       <input\n//         type=\"button\"\n//         onClick={() => getFields({ variables: { id: idToRender } })}\n//         value=\"Javascript\"\n//       ></input>\n//     );\n//   }\n//   return (\n//     <>\n//       <div>\n//         {functionToRender}\n//         <FunctionIdToRender />\n//       </div>\n//     </>\n//   );\n// }\n"]},"metadata":{},"sourceType":"module"}