{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/danielpiga/Desktop/Apollo2 copy/ApolloReact/apolloclient/src/route/Crypto.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { gql, useLazyQuery } from \"@apollo/client\";\nexport default function CRYPTO() {\n  _s();\n\n  const [result, setresult] = useState({\n    name: \"\",\n    value: []\n  });\n\n  function RenderResults() {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"name:  \", result.name, \" \", result.value.push()]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 9,\n      columnNumber: 13\n    }, this);\n  }\n\n  const CRYPTO = gql`\n  query crypto($symb: String) {\n    crypto(symb: $symb) {\n      name\n      value\n    }\n  }\n`;\n  const [getFields, {\n    loading,\n    data\n  }] = useLazyQuery(CRYPTO);\n  const [inputsUser, setinputsUser] = useState({\n    symbol: undefined\n  });\n\n  if (data) {}\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      onChange: e => setinputsUser({\n        symbol: e.target.value\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 6\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"submit\",\n      onClick: () => getFields({\n        variables: {\n          symb: inputsUser.symbol\n        }\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 6\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"submit\",\n      onClick: () => console.log('')\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 6\n    }, this)]\n  }, void 0, true);\n}\n\n_s(CRYPTO, \"f475p9qWSnwRvlaco/55xPmlv8M=\", false, function () {\n  return [useLazyQuery];\n});\n\n_c = CRYPTO;\n\nvar _c;\n\n$RefreshReg$(_c, \"CRYPTO\");","map":{"version":3,"sources":["/Users/danielpiga/Desktop/Apollo2 copy/ApolloReact/apolloclient/src/route/Crypto.js"],"names":["React","useState","useEffect","gql","useLazyQuery","CRYPTO","result","setresult","name","value","RenderResults","push","getFields","loading","data","inputsUser","setinputsUser","symbol","undefined","e","target","variables","symb","console","log"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA0C,OAA1C;AACA,SAASC,GAAT,EAAcC,YAAd,QAAkC,gBAAlC;AAEA,eAAe,SAASC,MAAT,GAAkB;AAAA;;AACjC,QAAM,CAACC,MAAD,EAAQC,SAAR,IAAmBN,QAAQ,CAAC;AAACO,IAAAA,IAAI,EAAC,EAAN;AAASC,IAAAA,KAAK,EAAC;AAAf,GAAD,CAAjC;;AAEA,WAASC,aAAT,GAAwB;AAEpB,wBAAQ;AAAA,4BAAWJ,MAAM,CAACE,IAAlB,OAAyBF,MAAM,CAACG,KAAP,CAAaE,IAAb,EAAzB;AAAA;AAAA;AAAA;AAAA;AAAA,YAAR;AAGH;;AACC,QAAMN,MAAM,GAAGF,GAAI;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,CAPE;AAQF,QAAM,CAACS,SAAD,EAAY;AAAEC,IAAAA,OAAF;AAAWC,IAAAA;AAAX,GAAZ,IAAiCV,YAAY,CAACC,MAAD,CAAnD;AACC,QAAM,CAACU,UAAD,EAAaC,aAAb,IAA8Bf,QAAQ,CAAC;AAC1CgB,IAAAA,MAAM,EAAEC;AADkC,GAAD,CAA5C;;AAIC,MAAGJ,IAAH,EAAQ,CAEP;;AAEF,sBACI;AAAA,4BACA;AAAO,MAAA,IAAI,EAAC,MAAZ;AAAmB,MAAA,QAAQ,EAAGK,CAAD,IAAKH,aAAa,CAAC;AAACC,QAAAA,MAAM,EAACE,CAAC,CAACC,MAAF,CAASX;AAAjB,OAAD;AAA/C;AAAA;AAAA;AAAA;AAAA,YADA,eAEA;AAAO,MAAA,IAAI,EAAC,QAAZ;AAAqB,MAAA,OAAO,EAAE,MAAIG,SAAS,CAAC;AAAES,QAAAA,SAAS,EAAE;AAAEC,UAAAA,IAAI,EAAEP,UAAU,CAACE;AAAnB;AAAb,OAAD;AAA3C;AAAA;AAAA;AAAA;AAAA,YAFA,eAGA;AAAO,MAAA,IAAI,EAAC,QAAZ;AAAqB,MAAA,OAAO,EAAE,MAAIM,OAAO,CAACC,GAAR,CAAY,EAAZ;AAAlC;AAAA;AAAA;AAAA;AAAA,YAHA;AAAA,kBADJ;AAOE;;GAjCqBnB,M;UAiBeD,Y;;;KAjBfC,M","sourcesContent":["import React, { useState, useEffect} from \"react\";\nimport { gql, useLazyQuery } from \"@apollo/client\";\n\nexport default function CRYPTO() {\nconst [result,setresult]=useState({name:\"\",value:[]})\n\nfunction RenderResults(){\n    \n    return (<p>name:  {result.name} {result.value.push()}</p>)\n\n\n}\n  const CRYPTO = gql`\n  query crypto($symb: String) {\n    crypto(symb: $symb) {\n      name\n      value\n    }\n  }\n`;\nconst [getFields, { loading, data }] = useLazyQuery(CRYPTO);\n const [inputsUser, setinputsUser] = useState({\n    symbol: undefined,\n    \n  });\n  if(data){\n\n  }\n\n return (\n     <>\n     <input type=\"text\" onChange={(e)=>setinputsUser({symbol:e.target.value})}></input>\n     <input type=\"submit\" onClick={()=>getFields({ variables: { symb: inputsUser.symbol } })}></input>\n     <input type=\"submit\" onClick={()=>console.log('')}></input>\n     \n     </>\n )}\n\n\n\n \n  "]},"metadata":{},"sourceType":"module"}